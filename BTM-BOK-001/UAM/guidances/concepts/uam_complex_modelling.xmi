<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-99XEY_Ohq7_7DLzAIh-7qA" name="uam_complex_modelling,_PjkWoObaEdyjVoHXO3Mbfg" guid="-99XEY_Ohq7_7DLzAIh-7qA" changeDate="2015-11-30T14:53:36.562-0500" version="2.0">
  <mainDescription>&lt;a id=&quot;XE_Complex_Models&quot; name=&quot;XE_Complex_Models&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Small and Large Organizations&quot; name=&quot;Small and Large Organizations&quot;>Introduction&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Dealing with the complexity of a large organization when developing an Enterprise Architecture, or other&#xD;
    contexts,&amp;nbsp;can be quite daunting. The differences between a small and large organization lies in the broader&#xD;
    spectrum of products and services, often within several totally different business lines or domains. Generally the&#xD;
    higher the complexity of the enterprise, the more distributed the organization and the market (both conceptually and&#xD;
    physically). This results in a larger number of more complex business activities, involving many more business&#xD;
    actors&amp;nbsp;with more specialized tasks, and a diversity of business locations&amp;nbsp;each having&amp;nbsp;quite separate and&#xD;
    different business activities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The techniques proposed here, for dealing with the complexities of architectures, may be applied independently or in&#xD;
    combination. They may also be used for other levels of IT architecture, even down to project and system architectures.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Super-Ordinate and Subordinate Models&quot; name=&quot;Super-Ordinate and Subordinate Models&quot;>Partition the Models&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/concepts/uam_levels_and_views_499BC4B8.html&quot;&#xD;
    guid=&quot;_W4UEAMqpEdy25fQyv59CjQ&quot;>Concept: Architecture Perspectives and Viewpoints&lt;/a>&amp;nbsp;the concepts of perspectives&#xD;
    (and layers within them) and aspects&amp;nbsp;(partitions) are described. Partitioning may also be applied to the IT&#xD;
    architecture as well. For example, the first step in defining an enterprise architecture could be to partition the&#xD;
    enterprise into large business lines or business domains.&amp;nbsp;A list of possible approaches for this partitioning are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Business Lines&lt;/strong> - large organizations may have completely (or mostly) independent business lines&#xD;
        (divisions), for example a hardware division and a software division.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Core vs. Support vs. Management&lt;/strong> - partitions are defined for&amp;nbsp;the core business activities&#xD;
        (e.g. hardware manufacturing), the management activities (e.g. senior management, production management, financial&#xD;
        management, HR management) and support activities (e.g. IT support, operations, HR operations, financial&#xD;
        operations).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Location&lt;/strong> - depending upon the type of organization, partitioning along geographic lines may be an&#xD;
        option.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Other&lt;/strong> - other approaches to partitioning are possible, the criteria for success being low-cohesion&#xD;
        between partitions (i.e. few interactions across partition boundaries).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    This technique could be summarized as &quot;horizontal divide and conquer&quot; since the enterprise is being partitioned&#xD;
    (divided)&amp;nbsp;into large activity areas (at the same level of abstraction). For example, a large IT company that&#xD;
    produces both hardware and software products could be partitioned at the highest level as shown below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Partition Architecture along Functional / Organizational Boundaries&quot;&#xD;
    src=&quot;./resources/Concepts_Partitions_business-lines.png&quot; width=&quot;400&quot; height=&quot;232&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    &lt;strong>Figure 1 - Combination of Business-line and Organizational Partitioning&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this example, we see the enterprise partitioned into Corporate Management, a Hardware Division, a Software Division&#xD;
    and Corporate Services. Each of these partitions could be modeled independently; however there will likely be many&#xD;
    dependencies between&amp;nbsp;Executive Management and Corporate Services, therefore one might consider creating a single&#xD;
    enterprise architecture for these two partitions.&amp;nbsp;Each of these high-level business activities are viewed&#xD;
    as&amp;nbsp;having separate IT architectures. Note also that these IT architectures may also be partitioned and layered to&#xD;
    deal with their complexities.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Functional Layering&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In software engineering, a technique used to handle the complexity of very large systems is called layering. The idea&#xD;
    behind this technique is to separate the application-specific parts from the more general parts of the system, so that&#xD;
    the program units and program services can be reused or kept largely independent (with well-defined interfaces). When&#xD;
    structuring IT architectures, the same principles are often naturally applied. For example, in the bottom layer you&#xD;
    find resources that provide general services; somewhere in the middle layer you often find resources that support&#xD;
    business-specific activities; and in the top layer you find business area-specific or product-specific specialists,&#xD;
    Research and Development, and sales force activities. Core business activities may use resources from all layers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Compared to a non-layered Business Model, a layered Business Model should be developed with two recommended&#xD;
    restrictions in mind:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A business activity in a certain layer (of abstraction) never makes contact with a business activity or manipulates&#xD;
        a business entity of a higher layer, except on explicit request from someone in the higher layer. Similarly,&#xD;
        business events from higher layers should not be propagated to lower layers, but re-defined (in more detail) if&#xD;
        needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A business activity has responsibilities only within its layer.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Without these restrictions, a layered structure quickly degenerates. Note that these restrictions apply to the case&#xD;
    where the most general parts of the business are found in lower layers (e.g. Call Activities), while the most specific&#xD;
    may be found in the upper layers.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another complimentary approach is to layer based upon the OSI network model, or more specifically the&#xD;
    &lt;em>application&lt;/em>, &lt;em>presentation&lt;/em>, and &lt;em>network&lt;/em> layers. Layering in this context is &lt;em>functional&#xD;
    layering&lt;/em> — each layer contains a set of like-functions, such as &lt;em>application&lt;/em> or &lt;em>network&lt;/em> in the&#xD;
    OSI&amp;nbsp;approach.&amp;nbsp;A&amp;nbsp;similar approach, more applicable to the Logical and Technical architecture&#xD;
    perspectives, can be used to define layers.&amp;nbsp;In this approach detail is hidden or encapsulated, and&amp;nbsp;can be&#xD;
    described as &lt;em>conceptual layering&lt;/em>, which is described next.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Conceptual &lt;a id=&quot;High-Level and Detailed Business Use Cases&quot;&#xD;
    name=&quot;High-Level and Detailed Business Use Cases&quot;>Layers&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Layering may be done&amp;nbsp;in any perspective and aspect (see: &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/concepts/uam_levels_and_views_499BC4B8.html&quot; guid=&quot;_W4UEAMqpEdy25fQyv59CjQ&quot;>Concept:&#xD;
    Architecture Perspectives and Viewpoints&lt;/a>). We now describe how to do this in the UAM IT architectures.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In addition to the partitioning approach described above, one may also define layers within partitions, that is, within&#xD;
    a particular architectural viewpoint—hierarchical views of the business. High-level layers provide general viewpoints&#xD;
    of the enterprise or business domain (the &quot;system&quot;) at a high conceptual level, with lower layers adding&#xD;
    detail—&quot;vertical divide and conquer&quot;. This fits nicely with the audience for these different viewpoints and layers. For&#xD;
    example, a company's executive management, as well as its process owners, are interested in their company's business&#xD;
    models—management must work with the company's strategic objectives, whereas the process owners and leaders need a more&#xD;
    detailed picture of how their process should be performed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the enterprise (i.e. the &quot;system&quot; being architected) is large and complex, or if differences between the executives'&#xD;
    and the process owners' views of the organization are great,&amp;nbsp;this can be dealt with by developing two&amp;nbsp;(or&#xD;
    more yet related)&amp;nbsp;layers. One model, for the executives, would contain a set of high-level business activities&#xD;
    that show the intent and purpose of the organization. The other model, for the process owners, would contain a detailed&#xD;
    set of activities that help clarify how the organization needs to function internally. For each high-level business&#xD;
    activity, you could define one, or several, detailed business activities representing the same thing within the&#xD;
    organization. For example, you could start with the primary business actor, detail the results and services he or she&#xD;
    is interested in,&amp;nbsp;then develop a separate business activity&amp;nbsp;for each detailed area.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you want to engineer your organization one business activity at a time, you can apply this technique incrementally.&#xD;
    First make a high-level activities model of the entire business and then &quot;drill-down&quot; into one of the activities of&#xD;
    interest to provide a more detailed model for the process owner. There is a one-to-one relationship between a&#xD;
    high-level business activities and its set of more detailed business activities — with the detail &lt;em>encapsulated&lt;/em>&#xD;
    within the activity. The figure below illustrates this concept. The &quot;Sales &amp;amp; Marketing&quot; activity (Contained within&#xD;
    a Customer Relationship Management (CRM) high-level activity) is drilled-down to expose more details.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Layering of the IT Architecture to deal with Complexity&quot;&#xD;
    src=&quot;./resources/Concepts_Conceptual_Layers.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    &lt;strong>Figure&amp;nbsp;2 - Layering of IT Architectures to deal with complexity&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;left&quot;>&#xD;
    Note the&amp;nbsp;&lt;img alt=&quot;Next layer defined decorator&quot; src=&quot;./resources/Drill-Down.png&quot; width=&quot;12&quot; height=&quot;12&quot; />&#xD;
    decorator on the &quot;Sales &amp;amp; Marketing&quot; activity, indicating that the next layer of detail of this &quot;collapsed&#xD;
    sub-process&quot; has been defined.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Focus on Core&amp;nbsp;Business&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In many cases, you are interested only in detailed information about one or a few of your business processes, depending&#xD;
    upon the objective of the architecture effort. However, to provide context, it is wise to identify the complete set of&#xD;
    business activities and briefly describe each of them. This results in a model that includes core business activities,&#xD;
    supporting business activities, and executive management business activities for example — in other words the&#xD;
    enterprise (or system under study) is partitioned. Once an overall model is constructed, to provide the context for the&#xD;
    IT architecture effort, the next layer of modeling focuses on the business activities of interest and develops more&#xD;
    detail.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This is illustrated in Figure 3 that shows an overall model of&amp;nbsp;an enterprise, with the highlighted activities&#xD;
    being the ones of interest and that will be developed in further detail — either within this IT architecture, or in&#xD;
    their own separate IT architectures.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Highlighted areas of interest will be drilled-down in the IT architecture&quot;&#xD;
    src=&quot;./resources/Concepts_Focus-on-Core-Business.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    &lt;strong>Figure&amp;nbsp;3 - The&lt;/strong> &lt;strong>entire organization; the&amp;nbsp;next layer focused on the highlighted areas&#xD;
    of interest&lt;/strong>&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
