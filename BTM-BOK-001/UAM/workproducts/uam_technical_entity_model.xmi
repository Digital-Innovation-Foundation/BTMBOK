<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-uvarR-l4TlVKG6vZ8av0Gg" name="uam_technical_entity_model,_MhRawM6mEdymj4NXv8-FYA" guid="-uvarR-l4TlVKG6vZ8av0Gg" authors="DW Enstrom" changeDate="2015-02-12T14:04:16.182-0500" changeDescription="New" version="2.0.0">
  <mainDescription>&lt;p>&#xD;
    The Technical Entity viewpoint is not an information or data design model, but it should be fairly close. The focus is&#xD;
    still architecture; therefore definitions, structures and relationships are the main focus however much more detail is&#xD;
    provided in this model than in the Logical level model.&#xD;
&lt;/p>&lt;a id=&quot;XE_Technical_Perspective__Technical_Entity_Model&quot; name=&quot;XE_Technical_Perspective__Technical_Entity_Model&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    The important things to specify are the system-wide or corporate-wide definitions for the elements within this model.&#xD;
    Element relationships are very important since they related directly to how the entities are used and need to be used&#xD;
    to support the business. Likewise the structure of the information is important—it must also support the business both&#xD;
    present and future.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Technical Roles Model has at this level flushed out some important structures and relationships as well. See the&#xD;
    definition for the Technical Roles Model below and how it supports Processes and their required access to Entities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLink&quot; href=&quot;./../../UAM/workproducts/uam_architectural_decision_E4B96628.html&quot;&#xD;
    guid=&quot;_WY_zYMKpEdy4DtCs1YI90Q&quot;>Architectural Decision&lt;/a>s are obviously an important deliverable at this level of&#xD;
    definition of the IT architecture. For example, the storage and database technology standards and where and how they&#xD;
    are deployed/used.&#xD;
&lt;/p></mainDescription>
  <purpose>&lt;p>&#xD;
    The Technical Entity Model is a description of technical entities involved in the enterprise or system, as defined by&#xD;
    the scope of the modeling effort. The objective is to clearly define the entities involved, and the relationships&#xD;
    between them. The definition must be valid for the defined scope, and must eliminate any ambiguity regarding what they&#xD;
    represent.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Relationships between entities are derived directly from analysis of the business, its technical level functions and&#xD;
    processes. Two main aspects are important, the relationships supporting the processes and functions, and the&#xD;
    relationships supporting the monitoring and management of the business. At this level of analysis generalizations,&#xD;
    aggregations and other types of analysis have been done and now technical considerations are dealt with, such as&#xD;
    storage technology and database technologies.&lt;br />&#xD;
&lt;/p></purpose>
  <representationOptions>&lt;p>&#xD;
    &lt;strong>UML Representation&lt;/strong>: Package stereotyped as «TPL_TEM» containing class diagrams.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A &lt;strong>Technical Entity Model&lt;/strong> may have the following properties:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Introduction:&lt;/strong> A textual description that serves as a brief introduction to the model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Packages:&lt;/strong> The packages in the model, representing a hierarchy, with one top-level: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Technical Entity Model (contained within the Technical Perspective package)&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Entities:&lt;/strong> The entities in the model, owned by the packages stereotyped as «TPL_Entity».&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Relationships:&lt;/strong> The relationships in the model, owned by the packages (i.e., simple, aggregation&#xD;
        and generalization).&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Diagrams:&lt;/strong> The diagrams in the model, owned by the packages.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Technical Entity Model is in essence a class diagram.&amp;nbsp;Note that entity operations are optional.&lt;br />&#xD;
    &lt;br />&#xD;
    The Technical Entity Model is a refinement of the Logical Entity Model, with the addition of technical concepts such as&#xD;
    specific storage and other persistence related technology. Most things defined at this stage will go on to be described&#xD;
    in more detail during the development of the Technical view. Note that the Technical Entity Model is only updated&#xD;
    during subsequent iterations to add entities not included in the original model or those needed in support of&#xD;
    computational aspects. Ensuring that there is traceability to business level entities from the Technical Entity Model&#xD;
    is valuable in the long run; this linkage supports the easy identification and modification of the model to support&#xD;
    changing business needs and priorities. This artifact is enclosed within the Technical Perspective artifact.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Decide on the following:&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The sub-package structure for the Technical Entity Model package;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Properties to include;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Whether or not any extensions to the Unified Modeling Language (UML) are needed; additional stereotypes or&#xD;
        profile&amp;nbsp;for example;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The level of formality&amp;nbsp;and detail in the model (see: &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../UAM/guidances/guidelines/uam_technical_entity_model_DF2D1DF6.html&quot;&#xD;
        guid=&quot;_N9bYMOV6EdyjVoHXO3Mbfg&quot;>Guideline: Technical Entity Model&lt;/a>);&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Whether a single model or multiple models will be used.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Normally the entities&amp;nbsp;in this logical model will evolve directly into elements in the&amp;nbsp;Technical&#xD;
    Perspective.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The extra work required, to ensure that the Logical Entity&amp;nbsp;and&amp;nbsp;Technical level&amp;nbsp;models remain consistent,&#xD;
    must be balanced against the benefit of having a view of the system which represents only the most important details of&#xD;
    how it works. It can be very costly to maintain a high degree of fidelity between the models. A less ambitious approach&#xD;
    might be to maintain the&amp;nbsp;Logical Entity&amp;nbsp;Model with only the most important&amp;nbsp;entities and the key&#xD;
    abstractions. As the complexity of the model increases, so does the cost to maintain it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once the Technical Entity&amp;nbsp;Model is no longer maintained, its value decays rapidly. At some point, if it is not&#xD;
    maintained, it will cease to be useful as it no longer will accurately reflect the needs of the system. Deciding to no&#xD;
    longer maintain the&amp;nbsp;model may be appropriate (it may have served its purpose), but the decision should be a&#xD;
    conscious one.&#xD;
&lt;/p></representationOptions>
</org.eclipse.epf.uma:ArtifactDescription>
