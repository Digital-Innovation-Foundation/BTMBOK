<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-LV9XZFQkZkT60KAPweDrCQ" name="uam_logical_entity_model,_-zp8sOV5EdyjVoHXO3Mbfg" guid="-LV9XZFQkZkT60KAPweDrCQ" authors="DW Enstrom" changeDate="2015-11-30T16:51:26.101-0500" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In the Unified Architecture Method (UAM), &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../UAM/workproducts/uam_logical_entity_model_2ACBC73E.html&quot; guid=&quot;_UkGJEM6jEdymj4NXv8-FYA&quot;>Logical Entity&#xD;
    Model&lt;/a>s are used to analyze the structure of the persistent entities used by the system.&amp;nbsp;&amp;nbsp;At this level of&#xD;
    modeling we are not concerned with the design of tables in the database, the physical storage of the database, nor the&#xD;
    constructs for modeling referential integrity (constraints and triggers) and stored procedures. The model is defined at&#xD;
    the logical level, therefore candidate keys and other constructs may be defined if desired.&amp;nbsp;These models are also&#xD;
    used to define the &quot;owner&quot; of the entity and activities that are users of (subscribers to) the entity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This guideline describes the model elements used to construct a Logical Entity Model for the &quot;system&quot;. Note that the&#xD;
    data modeling representations contained in this guideline are based on the UML 2.0.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;strong>&lt;u>Note&lt;/u>:&lt;/strong> Since UAM may model the complete enterprise (or business domain), the level of detail&#xD;
        to be included in this model is a judgment call of the architect, based upon:&#xD;
    &lt;/p>&#xD;
    &lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                The objective of the architecture effort&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The size of the enterprise or (business line)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Time and resource constraints&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/div>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Ensure that the entities are defined at the same level of abstraction at each layer, that definitions are agreed and&#xD;
    are clear and concise and that all required relationships are defined and understood. Layering and other structuring&#xD;
    approaches are essential for larger logical entity models in order to deal with complexity. Partitioning is also used&#xD;
    at the logical level. The top level classes at the logical level&amp;nbsp;are the business view &lt;em>leaf&lt;/em>&#xD;
    classes,&amp;nbsp;which define the starting point for the Logical Entity Model.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Stages of Entity Modeling&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are three general stages in the development of&amp;nbsp;entity (data) models, which equate directly to UAM&#xD;
    perspectives: conceptual (i.e., Business level), logical (i.e., Logical level),&amp;nbsp;and physical (i.e., Technical&#xD;
    level), see:&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/concepts/uam_data-modelling_1E62451A.html&quot; guid=&quot;_cSLisPveEeOyDIZvZjuaLg&quot;>Concept: Data&#xD;
    Modeling&lt;/a>.&amp;nbsp;These stages of (data) modeling reflect the different views (and levels of detail) in the UAM, see&#xD;
    &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/concepts/uam_levels_and_views_499BC4B8.html&quot;&#xD;
    guid=&quot;_W4UEAMqpEdy25fQyv59CjQ&quot;>Concept: Architecture Perspectives and Viewpoints&lt;/a>. Also see: &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/guidelines/uam_business_entity_model_EC888749.html&quot;&#xD;
    guid=&quot;_MYViYOS5EdyYxtlRIMoTnw&quot;>Guideline: Business Entity Model&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_technical_entity_model_DF2D1DF6.html&quot;&#xD;
    guid=&quot;_N9bYMOV6EdyjVoHXO3Mbfg&quot;>Guideline: Technical Entity Model&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A definition of&amp;nbsp;logical data modeling is provided in&amp;nbsp;&lt;a&#xD;
    href=&quot;http://en.wikipedia.org/wiki/Logical_data_model&quot; target=&quot;_blank&quot;>Wikipedia: Logical Data Model&lt;/a> and a brief&#xD;
    introduction to how to do it is provided in &lt;a&#xD;
    href=&quot;http://www.techrepublic.com/article/how-to-implement-a-logical-data-model/&quot; target=&quot;_blank&quot;>Tech Republic:&#xD;
    Implement a Logical Data Model&lt;/a>. A summary of technical data modeling (i.e., the Technology View) is also provided&#xD;
    below for reference, but also see: &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_business_entity_model_EC888749.html&quot;&#xD;
    guid=&quot;_MYViYOS5EdyYxtlRIMoTnw&quot;>Guideline: Business Entity Model&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_technical_entity_model_DF2D1DF6.html&quot;&#xD;
    guid=&quot;_N9bYMOV6EdyjVoHXO3Mbfg&quot;>Guideline: Technical Entity Model&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Logical Entity Model&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In logical entity modeling, the architect is concerned with identifying the key entities and relationships that capture&#xD;
    the critical information that the system needs to persist.&amp;nbsp; During the analysis&amp;nbsp;and definition of required&#xD;
    classes, the architect needs to ensure that the entities defined, along with relationship between them, will adequately&#xD;
    support the system activities (processes and tasks) defined at the logical level.&amp;nbsp; During the &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../UAM/tasks/uam_define_logical_entity_2AFEE0FE.html&quot;&#xD;
    guid=&quot;_czkLENNoEdyTfZVjf0InKw&quot;>Define Logical Entity Model&lt;/a>&amp;nbsp;task, the&amp;nbsp;architect and designer must identify&#xD;
    the set of classes in the model and a structure to persist data in data stores, all in support of the processes where&#xD;
    they are used.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This set of persistent classes in the model provides a Logical Entity Model View that, although different from the&#xD;
    traditional logical data model, meets many of the same needs; however it is for use by architects in understanding the&#xD;
    larger picture of the system under study.&amp;nbsp;The persistent classes used in the Logical Entity Model function in the&#xD;
    same manner as the traditional entities in the logical data model. These design classes accurately reflect the data&#xD;
    that must be persisted, however&amp;nbsp;not all of&amp;nbsp;the attributes that must be persisted or relationships may be&#xD;
    defined. These classes are an excellent starting point for a logical data model—but as always, the level of detail is&#xD;
    left up to the IT architected based upon the scope, context, and goals of the IT architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A simple example Logical Entity Model is shown below. This model is very much based upon the business entity model,&#xD;
    however there is more detail added and business entities may morph (or even disappear as well) into multiple logical&#xD;
    entities.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Logical Entity Model showing more detail and more required structures&quot;&#xD;
    src=&quot;./resources/Logical-Perspective_LEM.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The main objective of the Logical Entity Model is to define enterprise patterns/structures (for storage, object flow,&#xD;
    etc.) as well as clear names and relationships between them—the logical level architectural decisions concerning&#xD;
    entities in other words. For more information on modeling logical entities see: &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_logical_entity_3CA201C3.html&quot; guid=&quot;_n7HSsOX9EdyjVoHXO3Mbfg&quot;>Guideline:&#xD;
    Logical Entity&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_diagrams_in_logical_pers_FA9238A.html&quot;&#xD;
    guid=&quot;_PxJUAOoZEdytvcf-4U2D3Q&quot;>Guideline: Logical Perspective Views&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Technical&amp;nbsp;Entity Model&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Technical Entity Model is the final stage of development of the data aspect for the system.&amp;nbsp; The Technical&#xD;
    Entity Model defines technical choices, namely design patterns and standards that support both the logical view and the&#xD;
    business along with persistence technologies (i.e., data base vendors, etc.). There may also be some refinement of the&#xD;
    data model, but the focus is on design patterns and technical standards.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on the technical data model see: &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_technical_entity_model_DF2D1DF6.html&quot;&#xD;
    guid=&quot;_N9bYMOV6EdyjVoHXO3Mbfg&quot;>Guideline: Technical Entity Model&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_diagrams_in_technical_pers_877C1261.html&quot;&#xD;
    guid=&quot;_sQx18OrgEdytvcf-4U2D3Q&quot;>Guideline: Technical Perspective Views&lt;/a>.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
