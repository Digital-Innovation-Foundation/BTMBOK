<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-0hmenZMmE06KRzgfIV-c9Q" name="uam_diagrams_in_technical_model,_sQx18OrgEdytvcf-4U2D3Q" guid="-0hmenZMmE06KRzgfIV-c9Q" authors="DW Enstrom" changeDate="2014-06-24T14:57:51.583-0400" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&lt;a id=&quot;XE_Technical_Perspective__diagrams&quot; name=&quot;XE_Technical_Perspective__diagrams&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Various viewpoints are used in documenting the system at the technical level, namely the Technical Entity Model, the&#xD;
    Technical Process Model, the Technical Locations Model and the Technical Roles Model. Each of these &quot;models&quot; or&#xD;
    viewpoints may be documented using several types of diagrams.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical Model View (level) and aspects&quot; src=&quot;./resources/pers_tech.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following overview is organized by aspect:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#SystemEntity111&quot;>Diagrams in the Technical Entity Model&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#SystemProcess111&quot;>Diagrams in the Technical Process Model&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#SystemLocation111&quot;>Diagrams in the Technical Locations Model&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#SystemRoles111&quot;>Diagrams in the Technical Roles Model&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;SystemEntity111&quot; name=&quot;SystemEntity111&quot;>Technical Entity Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Diagrams used in the technical entity model, which essentially add more detail to the logical-level model,&amp;nbsp;are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Class Diagram&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        State Diagram&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Class Diagram&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Class diagrams show associations, aggregations and generalizations between technical entities. The following kinds of&#xD;
    class diagrams might be of interest in the context of the technical entity model:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Inheritance hierarchies, aggregations or compositions&amp;nbsp;and other structures.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How technical entities are related to activities by means of associations in support of implementation.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The class diagram below shows a partial view of the technical entities involved in the airport example; note the&#xD;
    detailed view with practical implementation level aspects considered in its definition. Is this level of detail needed&#xD;
    in an enterprise or domain architecture? This depends on the objectives of the architecture, size of the organization&#xD;
    and other factors. A judgment call by the organization and IT architect.&amp;nbsp; Also, the diagrams may be generalized in&#xD;
    order to show the technical architectural patterns to be used, or technical standards and their use, rather than being&#xD;
    totally prescriptive. In the &lt;em>entity&lt;/em> context, standards such as RDBMs vendors, storage patterns and vendors and&#xD;
    other technical standards and their use is defined if desired.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical level entity model - airport example&quot; src=&quot;./resources/Technical-Airport-Entities.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Class diagrams show generic structures in the technical entity model, but can also be part of the documentation&#xD;
    of&amp;nbsp;the technical&amp;nbsp;process model&amp;nbsp;by showing&amp;nbsp;how technical entities&amp;nbsp;participate in technical&#xD;
    activities (object flows) as shown below.&amp;nbsp; &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;br />&#xD;
    &amp;nbsp;&lt;img alt=&quot;Check-in activity detail&quot; src=&quot;./resources/Technical-Activities-Entities.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A class diagram showing participating technical activities and technical entities in the activity &lt;em>Check-in&lt;/em>.&#xD;
    Note that showing entities on a process diagram can be overwhelming—show them sparingly, only when they add value to&#xD;
    the model.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    State Diagram&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A state diagram is used to illustrate the possible states that a technical entity may be in, along with the events that&#xD;
    cause a transition from one state to another and the actions that result from a state change. A state diagram often&#xD;
    simplifies the validation of the class design and aids in understanding the process.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Technical entity diagram - baggage states&quot; src=&quot;./resources/Technical-Entity-States.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The technical entity &lt;em>baggage&lt;/em> described with a state diagram.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;SystemProcess111&quot; name=&quot;SystemProcess111&quot;>Technical Process Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Diagrams used in the technical process model are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Activity&amp;nbsp;Diagram&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Nested Activity Diagrams&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Entities on Activity Diagram&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Activity&amp;nbsp;Diagram&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An activity (or collaboration) diagram is&amp;nbsp;used to detail a workflow and optionally how technical entities are&#xD;
    used. This diagram may have the following elements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Activities&lt;/b> represent the performance of a task or step within the workflow.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Sequence Flows&lt;/strong> show what activity state follows another.&amp;nbsp;The technical level adds conditional&#xD;
        and default flows.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Pools&lt;/strong> and &lt;strong>Lanes&lt;/strong> that represent an organization, a system or possibly (but not&#xD;
        recommended) a role.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Gateways&lt;/strong> represent decision points in the workflow&amp;nbsp;for which a set of conditions and&#xD;
        choices&amp;nbsp;are defined. Gateways control which sequence flow path, of a set of alternative flows, follows once&#xD;
        the task is complete. You may also use the gateways to show where the threads merge again. Gateways allow you to&#xD;
        show alternative threads in the workflow of a business process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Events&lt;/b> are used to show where the process starts, ends and possibly modified through intermediate&#xD;
        events.&amp;nbsp;The technical level adds error and other exception handling.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Technical activity diagram&quot; src=&quot;./resources/Technical-Activity-Detail.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The diagram above is a more detailed activity diagram for the &lt;em>Check-in&lt;/em> and &lt;em>Baggage Handling&lt;/em>&#xD;
    activities&lt;em>.&lt;/em>&amp;nbsp;At this level all details are defined and activities are decomposed into leaf&#xD;
    &lt;em>tasks&lt;/em>—the workflow is completely defined including default&amp;nbsp;flows, error or other exception handling,&#xD;
    etc.&amp;nbsp;and is ready for implementation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Is this level of detail needed in an enterprise or domain architecture? It all depends on the objectives of the&#xD;
    architecture, size of the organization and other factors. Again, a&amp;nbsp;judgment call by the organization and IT&#xD;
    architect.&amp;nbsp; However, the diagrams may be generalized in order to show the technical architectural patterns to be&#xD;
    used, or technical standards and their use, rather than being totally prescriptive. In the process context, standards&#xD;
    such as workflow vendors, application development approaches and vendors and other technical standards and their use is&#xD;
    optionally defined.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Nested&amp;nbsp;Activity Diagrams&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An activity state may reference another activity diagram, which shows the internal structure of the activity. The first&#xD;
    activity diagram above, the one illustrating the entities involved, has two subsystems defined: the check-in subsystem&#xD;
    and the baggage handling subsystem. These subsystems have been expanded and further defined in the activity diagram&#xD;
    above that details the &lt;em>Check-in&lt;/em> and &lt;em>Baggage Handling&lt;/em> activities. &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Again, is this level of detail needed in an enterprise or domain architecture? This depends on the objectives of the&#xD;
    architecture, size of the organization and other factors.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Activity diagrams may also&amp;nbsp;be partitioned to separate the workflow and components into technical groupings based&#xD;
    upon sub-systems (as in the &lt;em>Check-in&lt;/em> and &lt;em>Baggage Handling&lt;/em> activities diagram above), organizations or&#xD;
    roles.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;SystemLocation111&quot; name=&quot;SystemLocation111&quot;>Technical Location Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Diagrams used in the technical locations model are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Technical Locations Model&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Technical Locations Model&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A Technical Locations Model&amp;nbsp;is mainly concerned with modeling the physical locations at which the&#xD;
    system/enterprise has a presence, along with the activities supported at these locations. The locations model is also&#xD;
    concerned with security aspects, and illustrates how the various locations are structured and connected to support both&#xD;
    the system and to address IT security requirements, at least at a very high-level through the definition of&#xD;
    &lt;em>domains&lt;/em> and &lt;em>zones&lt;/em>. See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/whitepapers/uam_security_reference_model_3EA07B63.html&quot;&#xD;
    guid=&quot;_KGs_oMX8EdyDYN2-y9-AqA&quot;>Whitepaper: A Reference Model for Enterprise Security&lt;/a>. An example of this is shown&#xD;
    below, illustrating a company headquarters domain that also includes their warehouse and a store domain.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical locations model - factory example top level&quot;&#xD;
    src=&quot;./resources/Technical-Locations-TLM-1.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This&amp;nbsp;shows more specific details compared to the diagram in &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_diagrams_in_logical_pers_FA9238A.html&quot;&#xD;
    guid=&quot;_PxJUAOoZEdytvcf-4U2D3Q&quot;>Logical Perspective Views&lt;/a>.&amp;nbsp;It shown the specific domains and the attributes of&#xD;
    these domains.&amp;nbsp;The Headquarters &lt;em>domain&lt;/em> is expanded further—the Store and Warehouse are just shown for&#xD;
    context. The headquarters of the enterprise is divided into a number of zones, with services&amp;nbsp;within each zone&#xD;
    having similar&amp;nbsp;levels of sensitivity (i.e. information/activities and therefore similar sensitivity from an IT&#xD;
    security perspective) grouped together. They are also grouped from a cohesion perspective as well, since for example HR&#xD;
    or Financial processes and tasks have a lot of interaction with each other.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Shown in the drill down into headquarters below are a &lt;em>headquarters domain policy enforcement&lt;/em> &lt;em>point&lt;/em>&#xD;
    (for the Store and other external interactions) and a &lt;em>zone policy enforcement point&lt;/em> (Warehouse PEP) that&#xD;
    respectively provide the policy separation between headquarters and these locations. Also shown in the diagram is how a&#xD;
    zone (or domain)—the enterprise management zone in this case—may be generalized in order to show the architectural&#xD;
    patterns or technical standards (rather than being totally prescriptive). The objectives of the architectural effort&#xD;
    dictate what the desired results are and how they are presented.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical locations model - factory example headquarters detail&quot;&#xD;
    src=&quot;./resources/Technical-Locations-TLM-2.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that this is where &lt;em>layering&lt;/em> the views really helps in dealing with large complex organizations. For&#xD;
    example, rather than show the Backbone network in all its detail (below), it could have been left as just a&#xD;
    &lt;em>network&lt;/em> graphic (as done for all zones).&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical locations model - factory example headquarters backbone network&quot;&#xD;
    src=&quot;./resources/Technical-Locations-TLM-3.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Again, is this level of detail needed in an enterprise or domain architecture? A judgment call by the organization and&#xD;
    the IT architect. In the &lt;em>locations&lt;/em> context, standards such as&amp;nbsp;security patterns, technologies&amp;nbsp;and&#xD;
    vendors, network implementation and topology patterns and vendors and other enterprise technical standards and their&#xD;
    use is typically defined.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;SystemRoles111&quot; name=&quot;SystemRoles111&quot;>Technical Roles Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Diagrams used in the technical roles model are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Roles Summary Diagram&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Roles in Context Diagrams&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Roles Summary Diagram&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A roles summary diagram is used to detail the structure of Actors and also of Roles. It also shows the relationships&#xD;
    between Actors &amp;amp; Roles and technical activities. At the business level&amp;nbsp;roles model&amp;nbsp;was very simple, and&#xD;
    at the logical level the analysis stopped short of finalizing the roles, but at the technical level all the&#xD;
    architectural decisions required to detail roles are made (i.e. automation vs. manual vs. interactive)—with this&#xD;
    analysis and details being defined at the technical level the roles are properly defined in support of RBAC. The&#xD;
    Summary Diagram illustrates how roles interact with User and Manual tasks and therefore is a useful aid in&#xD;
    understanding how to structure the GUI(s) is support of these roles and associated actors (and users). This structuring&#xD;
    supports two objectives:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Operations&lt;/strong> - having a structure to the roles clarifies&amp;nbsp;how&amp;nbsp;the various actors interact&#xD;
        with the system, to the point of identifying overlaps and re-use. This will ultimately reduce the implementation&#xD;
        complexity (i.e. the GUIs that these roles interact with) and to provide flexibility.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Security&lt;/strong>&amp;nbsp;- understanding how roles participate in processes identify the actions involved and&#xD;
        the entities involved, thereby identifying the IT security required for and equated to the role. Roles-based&#xD;
        security is the solution assumption with RBAC aspects being finalized in the Technical Roles Model.&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical roles model - airline example&quot; src=&quot;./resources/Technical-Roles-TRM-1.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example,&amp;nbsp;diagrams similar to the above are produced to illustrate the roles assumed by various employees or&#xD;
    classes of&amp;nbsp;employees, within the enterprise. The structure defined here has direct implications on the technical&#xD;
    level solution in terms of how technical activities collaborate, and on the IT security measures required to secure the&#xD;
    more sensitive technical activities.&amp;nbsp;As shown in the airport check-in example above there is a structure to the&#xD;
    definitions of actors—actors may be specialized. In any company there are always employees that have a standard set of&#xD;
    privileges to access and use a set of corporate-wide resources (e.g. HR services, email, Intranet, etc. through the&#xD;
    &lt;em>employee&lt;/em> role). Similarly, for systems whose scope is smaller than the enterprise there are typically a base&#xD;
    set of features and functions that all users get—either through the &lt;em>employee&lt;/em> role or through a system-specific&#xD;
    role. Other kinds of employees are defined, based upon the analysis of the system and its processes, which specialize&#xD;
    their various activities and responsibilities. In this example we have Agent, Agent Manager and Services Manager. Each&#xD;
    actor composes one or more roles. These roles are specific to the tasks and processes that they interact with, and&#xD;
    therefore which processes that they are allowed to interact with from an IT security perspective. Notice that an&#xD;
    &lt;em>Agent Manager&lt;/em> also may assist &lt;em>Agents&lt;/em> with &lt;em>Check-in&lt;/em>, presumably during busy periods.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    After some analysis at the technical level it was determined that a &lt;em>Manager&lt;/em> should be defined that composes&#xD;
    &lt;em>HR Manager&lt;/em> and &lt;em>Budget Manager&lt;/em>. The question then remains should these access privileges (and required&#xD;
    skills) be simply associated with a &lt;em>Manager&lt;/em> or should these roles remain in the model. The most flexible&#xD;
    approach would be to leave them all in the model, in case these separate roles are required for some reason in the&#xD;
    future. This is an example of an Architecture Decision to analyze and a decision to document.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The end result is definition of details in the technical models that will optimize the interfaces, their management and&#xD;
    the associated access controls. A better comprehension of the structure of user skills required, and interfaces in&#xD;
    support of complete processes results in a better user experience. This approach supports the concept of Roles Based&#xD;
    Access Control (RBAC) which may be used to define access privileges to IT resources within the architecture, most&#xD;
    conveniently defined in an RBAC grid or table.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In (&lt;a href=&quot;http://www.building-requirements-consensus.com/use-case-example-2.html&quot; target=&quot;_blank&quot;>Cook Enterprise&#xD;
    Corporation 2009&lt;/a>) a case study reveals the problems with simply using roles in analyzing user interactions with&#xD;
    systems. Similar to this case study, UAM separates out the real world (users) from the set of actors (e.g.&#xD;
    &lt;em>Customer&lt;/em> or &lt;em>Agent&lt;/em>) that they may assume and the roles (e.g. &lt;em>Check-in Agent&lt;/em>) that they have,&#xD;
    as shown in the figure below, a simplified version of&amp;nbsp;the figure above,&amp;nbsp;illustrates the power of this&#xD;
    separation of &lt;em>users&lt;/em>, &lt;em>actors&lt;/em>, and &lt;em>roles&lt;/em>. In this example a &lt;em>Middle Manager&lt;/em> named&#xD;
    &quot;Ian&quot; is shown (and stereotyped as «user») as&amp;nbsp;assuming the following roles:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Employee&lt;/strong> - permitting him/her to access all employee-related technical activities/tasks.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Executive&lt;/strong> - permitting him/her to access &quot;executive-only&quot; resources.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Manager&lt;/strong> - permitting him/her to access management level activities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>HR Manager&lt;/strong> - permitting him/her to access HR activities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Budget Manager&lt;/strong> - permitting him/her to manage a budget.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Check-in Agent&lt;/strong> - permitting him/her to assume the duties of a Check-in Agent, presumably only&#xD;
        under special circumstances.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical roles model - users and their roles&quot; src=&quot;./resources/Technical-Roles-TRM-2.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another employee called &quot;Kathleen&quot; is an &lt;em>agent&lt;/em>, that normally comes with the &lt;em>employee&lt;/em>, &lt;em>Ticket&#xD;
    Agent&lt;/em>, &lt;em>Check-in Agent&lt;/em> roles assigned. But Kathleen works in a small facility and as such needs to do HR&#xD;
    duties on occasion, and therefore she is assigned the &lt;em>HR Manager&lt;/em> role.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Again, is this level of detail&amp;nbsp;is perhaps too much for an&amp;nbsp;enterprise or business line architecture—but it&#xD;
    depends on the objectives of the architecture, size of the organization and other factors.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Roles in Context&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A &quot;roles-in-context&quot; diagram is used to detail the interactions of roles and actors with the activities in the&#xD;
    system.&amp;nbsp;This example diagram is&amp;nbsp;the ThuNorTech process &lt;em>Perform Lab Study&lt;/em>, but is a simplified&#xD;
    version showing only the relevant activities and with extraneous information removed, but with the roles added.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Technical roles model - roles in context&quot; src=&quot;./resources/Technical-Roles-Context.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At the technical level you can see that exception handling has been added and that the roles have been&#xD;
    refined.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
