<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-KdX4MSZJ82s1BDfxh7wOdg" name="new_concept,_K-fa0DErEeiooN8Zakj4QQ" guid="-KdX4MSZJ82s1BDfxh7wOdg" changeDate="2018-03-28T11:34:59.113-0400">
  <mainDescription>&lt;p>&#xD;
    A Development Process defines the structured work definitions that need to be performed to develop a system, e.g. by&#xD;
    performing a project that follows the process.&amp;nbsp; Such structured work definitions delineate the work to be&#xD;
    performed along a timeline or lifecycle and organize it in so called breakdown structures and/or activity diagrams. A&#xD;
    process takes reusable core method elements such as Tasks and Work Products and relates them into semi-ordered&#xD;
    sequences that are then customized to specific types of projects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Fundamental concepts used in UMA to define processes include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Activity&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Capability Pattern&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Delivery Process&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Descriptor&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;br />&#xD;
    Activity &lt;img alt=&quot;&quot; src=&quot;resources/Activity-32.gif&quot; width=&quot;32&quot; height=&quot;32&quot; />&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An Activity supports the nesting and logical grouping of related process elements also referred to as Breakdown&#xD;
    Elements (e.g. other Activities or Task Descriptors). The concepts Phase, Iteration, Delivery Process, and Capability&#xD;
    Pattern are defined as special Activities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Activities are the fundamental concept for defining processes.&amp;nbsp; Activities define the breakdown as well as flow of&#xD;
    work.&amp;nbsp; In other words, Activities can be nested into each other defining a breakdown structure of work or they can&#xD;
    define predecessor relationships to other Activities defining a flow presented in Activity diagrams.&amp;nbsp; Activities&#xD;
    can also contain references to Task, Roles, and Work Products called Descriptor. Activities as well as Descriptors&#xD;
    relate to timelines by allowing their instances to define start and/or end dates.&amp;nbsp; Further, they specify&#xD;
    information relevant to the instantiation of work in project such as if an Activity shall be performed several times&#xD;
    and if so if they can be performed in parallel (hasMultipleOccurrences attribute) or one after other (isRepeatable&#xD;
    attribute).&amp;nbsp; Activities and Task Descriptors can also be event driven or describing ongoing work that does not&#xD;
    have a fixed start and end time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    UMA defines several&amp;nbsp;special Activities that allow expressing processes with terms many users are familiar&#xD;
    with.&amp;nbsp; For example, Phase or Iteration are just special Activities for which specific attribute values have been&#xD;
    set with predefined values. A process such as a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.default.uma_concept.base/guidances/termdefinitions/capability_pattern_F5DDC5F.html&quot;&#xD;
    guid=&quot;_2RUJACO4EdqaNq6Ptg8uyA&quot;>capability pattern&lt;/a>&amp;nbsp;or &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.default.uma_concept.base/guidances/termdefinitions/delivery_process_BCDF50B7.html&quot;&#xD;
    guid=&quot;_ZufeMCO3EdqaNq6Ptg8uyA&quot;>delivery process&lt;/a>&amp;nbsp;is also nothing else than just a special Activity that&#xD;
    contains additional documentation on why and how to use the process. Hence, because Activities could be nested into&#xD;
    each other, so can processes.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Capability Pattern &lt;img alt=&quot;&quot; src=&quot;resources/Capability-Pattern-32.gif&quot; width=&quot;32&quot; height=&quot;32&quot; />&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A Capability Pattern is a special Process that describes a reusable cluster of Activities in common process areas that&#xD;
    produces a result of observable value.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Capabilities Patterns express and communicate process knowledge for a key area of interest such as a Discipline&#xD;
    or&amp;nbsp;a practice and can be directly used by process practitioners to guide their work.&amp;nbsp; They are also used as&#xD;
    building blocks to assemble Delivery Processes or larger Capability Patterns ensuring optimal reuse and application of&#xD;
    the key practices they express.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Examples for Capability Pattern could be 'use case-based requirements management', 'use case analysis', or 'unit&#xD;
    testing'. Typically but not necessarily, Capability Patterns have the scope of one Discipline providing a breakdown of&#xD;
    reusable complex Activities, relationships to the Roles which perform Tasks within these Activities, as well as to the&#xD;
    Work Products that are used and produced.&amp;nbsp; Generally, a Capability Pattern does not relate to any specific phase&#xD;
    or iteration of a development lifecycle, and should not imply any.&amp;nbsp; In other words, a pattern should be designed&#xD;
    in a way that it is applicable anywhere in a Delivery Process.&amp;nbsp; This enables its Activities to be flexibly&#xD;
    assigned to whatever phases there are in the Delivery Process to which it is being applied.&amp;nbsp; An exception to this&#xD;
    would be capability patterns that are intended to provide a template for quickly creating an iteration or portion of an&#xD;
    iteration for a particular phase in a Delivery Process.&lt;br />&#xD;
    &lt;br />&#xD;
    Key applications&amp;nbsp;or areas of reuse for Capability Patterns are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To serve as building blocks for assembling Delivery Processes or larger Capability Patterns.&amp;nbsp; Normally&#xD;
        developing a Delivery Process is not done from scratch but by systematically applying and binding patterns.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To support direct execution in a development project that does not work following a well-defined process, but works&#xD;
        based on loosely connected process fragments of practices in a flexible manner (for example, Agile Development).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To support process education by describing knowledge for a key area such as practices on how to perform the work&#xD;
        for a Discipline (for example, Requirements Management), for a specific development technique (aspect-oriented&#xD;
        development), or a specific technical area (for example, relational database design), which is used for education&#xD;
        and teaching.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The workflow of a Capability Pattern is usually represented using the UML Activity Diagram notation.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Sample activity diagram representing the workflow of a Capability Pattern&quot; src=&quot;./resources/wf_req.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Sample activity diagram, from&amp;nbsp;the requirements Discipline in RUP, showing workflow and transitions.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Delivery Process&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;resources/Delivery-Process-32.gif&quot; width=&quot;32&quot; height=&quot;32&quot; />&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A Delivery Process is a special Process describing a complete and integrated approach for performing a specific type of&#xD;
    project.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Delivery Process is a special &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.default.uma_concept.base/guidances/termdefinitions/process_68E308B4.html&quot;&#xD;
    guid=&quot;_yQ5m2NnmEdmO6L4XMImrsA&quot;>process&lt;/a> describing a complete and integrated approach for performing a specific&#xD;
    project type. It provides a complete lifecycle model that has been detailed by sequencing Method Content in breakdown&#xD;
    structures. It describes a complete project lifecycle end-to-end and is used as a reference for running projects with&#xD;
    similar characteristics.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A&amp;nbsp;process engineer can define alternative Delivery Processes for software development projects that differ in the&#xD;
    scale of the engagement and staffing necessary, the type of the software application to be developed, the development&#xD;
    methods and technologies to be used, etc. Although, the Delivery Process aims to cover a whole project it keeps certain&#xD;
    decision that are too project specific open.&amp;nbsp;&amp;nbsp;For example, the breakdown structure defines which Breakdown&#xD;
    Elements have multiple occurrences or are repeatable via its specific attributes, but does not say how many occurrences&#xD;
    and how many repeats/iterations it will have.&amp;nbsp; These decisions have to be done by a project manager when planning&#xD;
    a concrete project, project phase, or project iterations.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Software Engineering Process&quot; name=&quot;Software Engineering Process&quot;>Example&lt;/a>&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    In software engineering, the goal is to build a software product or to enhance an existing one. The Delivery Process&#xD;
    for software could be an iterative process, where the product is built incrementally over time, or it could be a&#xD;
    traditional waterfall Delivery Process in which all requirements are specified up front, followed by design,&#xD;
    implementation, and test phases.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;h3>&#xD;
    Descriptor&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;resources/Descriptors-32.gif&quot; width=&quot;32&quot; height=&quot;32&quot; />&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A Descriptor is a Process Element that represents the use or application of a Method Content element in the Process.&#xD;
    The Descriptor provides the ability to override or add to what is defined in the original Method Content Element.&#xD;
    Descriptors include Role, Task, and Work Product Descriptors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A Descriptor represent an occurrence of one concrete Content Element (such as Task, Role, Work Product) in an Activity.&#xD;
    Descriptors provides a proxy-like representation for these Content Elements within breakdown structures. In addition to&#xD;
    just referencing Content Elements it allows overriding the Content Elements' structural relationships by defining its&#xD;
    own sets of associations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Descriptors are a key concept for realizing the separation of Processes from Method Content. A Descriptor can be&#xD;
    characterized as a reference object for one particular Content Element, which has its own relationships and properties.&#xD;
    When a Descriptor is created, it has the same relationships as the referenced Content Element. However, users can&#xD;
    modify these relationships for the particular process situation for which the Descriptor has been created. The&#xD;
    Descriptor concept allows defining new relationships and specific process related properties. Descriptors are not&#xD;
    Content Elements and do not contain their own full descriptions. They refer or trace back to the Content Elements they&#xD;
    are based on instead.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Example&amp;nbsp;&#xD;
&lt;/h5>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Example of Method Content referenced by Descriptor&quot; src=&quot;./resources/descriptors.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;strong>Example of Method Content referenced by Descriptors&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    The above illustration depicts an example using UMA notation in which Descriptors have been created for a Task, its&#xD;
    performing Roles, as well as its input/output Work Products. The situation implied by this example is that the Task&#xD;
    &quot;Assess the Architecture&quot; is to be performed differently in a IT architecture project's Assess Logical Perspective&#xD;
    phase than in its Assess Technical Perspective phase (that is, with different emphasis on different Steps, utilizing&#xD;
    different inputs, etc.). In particular, we can observe the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Task in Assess Logical has an additional assisting Role (Business Expert), which is not involved with the&#xD;
        assessment at the Technical level.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Two different types of &quot;Perspective&quot; Work Products are distinguished here: a Logical Perspective and a Technical&#xD;
        Perspective.&amp;nbsp;&lt;br />&#xD;
        &amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;&quot; src=&quot;resources/uam.gif&quot; width=&quot;16&quot; height=&quot;16&quot; />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
