<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:GuidanceDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-odTGahwVR9KsdEY78D2qzA" name="uam_pattern_SOA,_be1cULFbEeSgVPmVL1L5GQ" guid="-odTGahwVR9KsdEY78D2qzA" changeDate="2015-02-10T09:46:55.660-0500" version="7.5.1">
  <mainDescription>&lt;a id=&quot;XE_Patterns__SOA&quot; name=&quot;XE_Patterns__SOA&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A &lt;em>service&lt;/em> is a self-contained unit of functionality. Services can be combined together through software&#xD;
    applications to provide the complete functionality of a&amp;nbsp;larger business-level service (or function).&amp;nbsp;SOA&#xD;
    provides the environment and infrastructure needed for these service to interact through a&amp;nbsp;network over various&#xD;
    protocols. Services are distributed over a defined set of servers,&amp;nbsp;with each service implemented so it can&#xD;
    exchange information with other services in the network.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Problem Description&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The need to support, in a flexible way, large and sometimes dynamic business processes is important in todays very&#xD;
    demanding business environments. Steps, or services, involved in the end-to-end process need to be added, removed or&#xD;
    updated to accommodate new requirements. Business rules may also change, along with the data that supports or is&#xD;
    involved in the process. SOA provides the flexibility and adaptability necessary to meet these demands.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Applicable Context&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    SOA may be used within any corporation, whether or not it is located at a single location, or distributed around the&#xD;
    world. The distinct services need to be identifiable and implemented so that they can be loosely coupled and&amp;nbsp;tied&#xD;
    together to provide the over-all business services. Some applications do not lend themselves to this type of division&#xD;
    or segregation, and therefore SOA will not be applicable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    SOA is suitable when message-based communication is used between portions&amp;nbsp;an application. These can be exposed in&#xD;
    a platform independent way.&amp;nbsp;If services are to be discoverable through directories and used by clients that have&#xD;
    no prior knowledge of the interfaces, then SOA is the correct approach.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pattern Constraints&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    SOA requires the separation of applications into loosely coupled services. If the applications cannot be separated into&#xD;
    distinct units, or services, accessible over a network then the SOA approach cannot be used. The architecture must&#xD;
    define services to allow&amp;nbsp;implementer to combine and reuse them in end-to-end processes or business-level service.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pattern Solution&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    SOA has a number of characteristics that define this type of approach:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Standardized&lt;/strong>&amp;nbsp;- services adhere to a standardized communications interface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Loose Coupling&lt;/strong> - services maintain independence.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Encapsulation&lt;/strong> -&amp;nbsp;services hide&amp;nbsp;internal implementation/operation&amp;nbsp;from the outside&#xD;
        world.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Reusability&lt;/strong>&amp;nbsp; - services are&amp;nbsp;flexible (extra logic) with the intention of promoting&#xD;
        reuse.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Autonomy&lt;/strong> - logic is controlled and&amp;nbsp;encapsulated,&amp;nbsp;at design-time and run-time.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Statelessness&lt;/strong> -&amp;nbsp;services minimize the management of state information.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Discoverability&lt;/strong>&amp;nbsp;- services have metadata&amp;nbsp;to make them discoverable and understandable.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Composability&lt;/strong>&amp;nbsp;- services support composition with other services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Granularity&lt;/strong>&amp;nbsp;-&amp;nbsp;the granularity&amp;nbsp;of services is optimized to support the business&#xD;
        functionality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Normalization&lt;/strong> -&amp;nbsp;services are decomposed to minimize redundancy.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Optimization&lt;/strong> - high-quality services are optimized for performance and other aspects.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Relevance&lt;/strong> - the granularity chosen provides a meaningful service (to users).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Location Transparency&lt;/strong>&amp;nbsp;-&amp;nbsp;a consumer can invoke a service regardless of its actual&#xD;
        location in the network.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Services are built&amp;nbsp;to operate on a supporting infrastructure. These services are exposed (discoverable) and are&#xD;
    usable&amp;nbsp;over and over again within applications / processes.&amp;nbsp;Services can be bound into a&amp;nbsp;business&#xD;
    process, or they can be used individually.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;SOA layers in blue provide the services and infrastructure that support applications and processes&quot;&#xD;
    src=&quot;./resources/Arch-Pattern-SOA.png&quot; width=&quot;256&quot; height=&quot;454&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One of the keys to SOA architecture is that interactions occur with loosely coupled services that operate&#xD;
    independently. SOA architecture allows for service reuse, making it unnecessary to start from scratch when upgrades and&#xD;
    other modifications are needed. This is a benefit to businesses that seek ways to save time and money.&lt;br />&#xD;
    &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    SOA is&amp;nbsp;a useful approach&amp;nbsp;to&amp;nbsp;problematic architectures. With the wide use of standards such as Web&#xD;
    Services, SOA can be used to bring architectural agility and stability to the IT environment.&amp;nbsp;However, SOA must be&#xD;
    done correctly to realize these benefits.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Related Patterns&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    SOA is very similar to&amp;nbsp;n-tier, but with some very basic differences:&#xD;
&lt;/p>&#xD;
&lt;ul class=&quot;noindent&quot;>&#xD;
    &lt;li>&#xD;
        &lt;strong>n-Tier&lt;/strong> - multi-tier architecture (often referred to as n-tier architecture) is a variation of&#xD;
        client-server architecture where the presentation, application processing, and data services are separated.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;N-Tier&quot; src=&quot;./resources/Arch-Pattern-n-tier.png&quot; width=&quot;228&quot; height=&quot;250&quot; />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:GuidanceDescription>
