<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-NP_XV9b5jU3atlwBkFdqEw" name="new_supporting_material,_mHp1MEJhEeOfR_FtRm9PUg" guid="-NP_XV9b5jU3atlwBkFdqEw" changeDate="2015-02-19T18:04:09.021-0500" version="2.0.1">
  <mainDescription>&lt;a id=&quot;XE_UAM_Perspective_Languages&quot; name=&quot;XE_UAM_Perspective_Languages&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This document provides quick overview of the modeling languages for the four perspectives and associated viewpoints&#xD;
    defined in UAM. More complete summaries are defined for each perspective as well:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/supportingmaterials/uam_bpl_simple_858E0AEB.html&quot;&#xD;
        guid=&quot;_472cUEWIEeOfR_FtRm9PUg&quot;>BPL Summary&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/supportingmaterials/uam_lpl_simple_AB1449E6.html&quot;&#xD;
        guid=&quot;_uOZlsEWJEeOfR_FtRm9PUg&quot;>LPL Summary&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/supportingmaterials/uam_tpl_simple_FA24A330.html&quot;&#xD;
        guid=&quot;_w5B_8EWJEeOfR_FtRm9PUg&quot;>TPL Summary&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For very detailed descriptions of each perspective language see:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/supportingmaterials/uam_bpl_C992E348.html&quot;&#xD;
        guid=&quot;_djWF0LhuEeSeNe6SxZNlbg&quot;>BPL Defined&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/supportingmaterials/uam_lpl_E063ECCA.html&quot;&#xD;
        guid=&quot;_eNHwsLhwEeSeNe6SxZNlbg&quot;>LPL Defined&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/supportingmaterials/uam_tpl_97B34E1E.html&quot;&#xD;
        guid=&quot;_l__hALh5EeSeNe6SxZNlbg&quot;>TPL Defined&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Business Perspective Language is based upon a very small subset of BPMN elements, with the addition of business&#xD;
    entities, business locations, and business roles elements. The image below summarizes, using UML notation, the language&#xD;
    elements and inter-relationships of the UAM Business Perspective language.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;UAM Business Perspective Language Summary&quot; src=&quot;./resources/BPM-Summary.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This metamodel summarizes the Business Perspective language.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Logical Perspective&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Logical Perspective Language is based upon the &lt;b>BPMN Descriptive Conformance&lt;/b> sub-class elements and&#xD;
    attributes as defined in the table below, with the addition of un-typed Throwing Event, Link Events (Catch and Throw),&#xD;
    Message (Send and Receive) and Send and Receive Task elements. This conformance profile is used for logical-level&#xD;
    business process modeling in UAM, as required by the context and objective of the architecture effort; however the UAM&#xD;
    methodology has some specific recommendations on how to use this profile. The image below summarizes, using UML&#xD;
    notation, the language elements and inter-relationships of the UAM Logical Perspective language.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;UAM Logical Perspective Language Summary&quot; src=&quot;./resources/LPM-Summary.png&quot; />&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This metamodel summarizes the Logical Perspective language.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p>&#xD;
&lt;table title=&quot;BPMN Descriptive Conformance Sub-Class Elements &amp;amp; Attributes&quot; style=&quot;HEIGHT: 557px; WIDTH: 566px&quot;&#xD;
cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;566&quot; summary=&quot;BPMN Descriptive Conformance Sub-Class Elements &amp;amp; Attributes&quot;&#xD;
border=&quot;1&quot;>&#xD;
    &lt;caption>&#xD;
        &lt;strong>BPMN Descriptive Conformance Sub-Class Elements &amp;amp; Attributes&lt;/strong>&#xD;
    &lt;/caption>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;col&quot; abbr=&quot;&quot;>&#xD;
                Element&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot; abbr=&quot;&quot;>&#xD;
                Attributes&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                participant (pool)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, processRef&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                laneSet&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, lane with name, childLaneSet, flowElementRef&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                sequenceFlow (unconditional)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, sourceRef, targetRef&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                messageFlow&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, sourceRef, targetRef&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                exclusiveGateway&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                parallelGateway&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                task (None)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                userTask&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;p>&#xD;
                    id, name&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                serviceTask&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                subProcess (expanded)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, flowElement&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                subProcess (collapsed)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, flowElement&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                CallActivity&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, calledElement&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                DataObject&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                TextAnnotation&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, text&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                association/dataAssociation&lt;sup>a&lt;/sup>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, sourceRef, targetRef, associationDirection&lt;sup>b&lt;/sup>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                dataStoreReference&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, dataStoreRef&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                startEvent (None)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                endEvent (None)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                messageStartEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, messageEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                messageEndEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, messageEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                timerStartEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, timerEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                terminateEndEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, terminateEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                documentation&lt;sup>c&lt;/sup>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                text&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Group&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, categoryRef&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    a. &lt;strong>Data Association&lt;/strong> is ABSTRACT: &lt;strong>Data Input Association&lt;/strong> and &lt;strong>Data Output&#xD;
    Association&lt;/strong> will appear in the XML serialization. These both have REQUIRED attributes [&lt;font&#xD;
    face=&quot;Courier New&quot;>sourceRef&lt;/font> and &lt;font face=&quot;Courier New&quot;>targetRef&lt;/font>] which refer to &lt;font&#xD;
    face=&quot;Courier New&quot;>itemAwareElements&lt;/font>. To be consistent with the metamodel, this will require the following&#xD;
    additional elements: &lt;font face=&quot;Courier New&quot;>ioSpecification, inputSet, outputSet, Data Input, Data Output&lt;/font>.&#xD;
    When a &lt;strong>BPMN&lt;/strong> editor draws a &lt;strong>Data Association&lt;/strong> to an &lt;strong>Activity&lt;/strong> or&#xD;
    &lt;strong>Event&lt;/strong> it should generate this supporting invisible substructure. Otherwise, the metamodel would have&#xD;
    to be changed to make &lt;font face=&quot;Courier New&quot;>sourceRef&lt;/font> and &lt;font face=&quot;Courier New&quot;>targetRef&lt;/font> optional&#xD;
    or allow reference to &lt;font face=&quot;Courier New&quot;>non-itemAwareElements&lt;/font>, e.g., &lt;font&#xD;
    face=&quot;Courier New&quot;>Activity&lt;/font> and &lt;font face=&quot;Courier New&quot;>Event&lt;/font>.&lt;br />&#xD;
    b. &lt;font face=&quot;Courier New&quot;>associationDirection&lt;/font> not specified for &lt;strong>Data Association&lt;/strong>&lt;br />&#xD;
    c. &lt;font face=&quot;Courier New&quot;>Documentation&lt;/font> is not a visible element. It is an attribute of most elements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In addition to these elements defined for the Descriptive Conformance profile for BPMN V2.0, UAM has added the&#xD;
    following BPMN elements to the Logical Process Viewpoint language:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Activity&lt;/strong> – Ad Hoc Subprocess, Sequential, Parallel and Loop activities;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Conditional Events&lt;/strong> – Start, Catching, Intermediate Interrupting, &amp;amp; Intermediate&#xD;
        Non-Interrupting;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Message Event&lt;/strong> – Message Catching;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Event Gateways&lt;/strong> – Event-Based, Event-Exclusive, and Event-Parallel gateways;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Link Events&lt;/strong> – Catching and Throwing;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Messages&lt;/strong> – Send and Receive;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Sequence Flow&lt;/strong> – conditional and default flows;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Signal Events&lt;/strong> – Start, Intermediate Interrupting, Intermediate Non-Interrupting, Throw and End;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Timer Event&lt;/strong> – Timer Catching;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Tasks&lt;/strong> – Send, Receive, Manual, Business Rule and Script tasks;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Untyped Event&lt;/strong> – Throwing.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Technical Perspective&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Technical Perspective in UAM conforms to the &lt;strong>BPMN Analytic Conformance&lt;/strong> profile. This conformance&#xD;
    profile is used for technical-level business process modeling in UAM, as required by the context and objective of the&#xD;
    architecture effort. The Analytic Conformance sub-class contains all the elements of the &lt;strong>Descriptive&#xD;
    Conformance&lt;/strong> sub-class (i.e. the Logical Perspective, see the table above) plus the elements shown in table&#xD;
    below. This conformance profile is used for more detailed technical level business process modeling in UAM, as required&#xD;
    by the context and objective of the architecture effort; however the UAM methodology has some specific recommendations&#xD;
    on how to use this profile.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;UAM Technical Perspective Language Summary&quot; src=&quot;./resources/TPM-Summary.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This metamodel summarizes the Technical Perspective language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An overview of the main set of language components and relationships is show in the figure below, including a&#xD;
    definition of the metamodel—the structure and relationship rules for the Technical Perspective Language (i.e. the&#xD;
    grammar).&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p>&#xD;
&lt;table title=&quot;BPMN Analytic Conformance Sub-Class Elements and Attributes (OMG 2011)&quot; style=&quot;HEIGHT: 758px; WIDTH: 790px&quot;&#xD;
cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;790&quot;&#xD;
summary=&quot;BPMN Analytic Conformance Sub-Class Elements and Attributes (OMG 2011)&quot; border=&quot;1&quot;>&#xD;
    &lt;caption>&#xD;
        &lt;strong>BPMN Analytic Conformance Sub-Class Elements and Attributes (OMG 2011)&lt;/strong>&#xD;
    &lt;/caption>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;col&quot; abbr=&quot;&quot;>&#xD;
                Element&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot; abbr=&quot;&quot;>&#xD;
                Attributes&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                sequenceFlow (conditional)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, sourceRef, targetRef, conditionExpression&lt;sup>a&lt;/sup>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                sequenceFlow (default)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, sourceRef, targetRef, default&lt;sup>b&lt;/sup>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                sendTask&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                receiveTask&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Looping Activity&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                standardLoopCharacteristics&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                MultiInstance Activity&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                multiInstanceLoopCharacteristics&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                exclusiveGateway&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Add default attribute&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                inclusiveGateway&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, eventGatewayType&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                eventBasedGateway&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, eventGatewayType&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Link catch/throw Intermediate&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Event Id, name, linkEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                signalStartEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, signalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                signalEndEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, signalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Catching message Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, messageEventDefinitionBusiness&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Throwing message Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, messageEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Boundary message Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, messageEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Non-interrupting Boundary message Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, cancelActivity=false, messageEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Catching timer Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, timerEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Boundary timer Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, timerEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Non-interrupting Boundary timer Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, cancelActivity=false, timerEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Boundary error Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, errorEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                errorEndEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, errorEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Non-interrupting Boundary escalation Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, cancelActivity=false, escalationEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Throwing escalation Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, escalationEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                escalationEndEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, escalationEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Catching signal Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, signalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Throwing signal Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, signalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Boundary signal Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, signalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Non-interrupting Boundary signal Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, attachedToRef, cancelActivity=false, signalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                conditionalStartEvent&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, conditionalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Catching conditional Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, conditionalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Boundary conditional Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, conditionalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Non-interrupting Boundary conditional Intermediate Event&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                id, name, cancelActivity=false, conditionalEventDefinition&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;p>&#xD;
                    message&lt;sup>c&lt;/sup>&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;p>&#xD;
                    &amp;nbsp;id, name, add messageRef attribute to messageFlow&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;br />&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        a. ConditionExpression, allowed only for Sequence Flow out of Gateways, MAY be null.&lt;br />&#xD;
        b. Default is an attribute of a sourceRef (exclusive or inclusive) Gateway.&lt;br />&#xD;
        c. Note that messageRef, an attribute of various message Events, is optional and not in the sub-class.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In addition to these elements defined for the Analytic Conformance profile for BPMN V2.0, UAM has added the following&#xD;
    BPMN elements to the Technical Process Viewpoint language:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Activity&lt;/strong> – Ad Hoc Subprocess, Compensation;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Cancel Events&lt;/strong> – Boundary Interrupting, and End;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Compensation Events&lt;/strong> – Event Sub-Process Interrupting, Boundary Interrupting, Throwing, End;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Escalation Event&lt;/strong> – Boundary Interrupting;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Error Event&lt;/strong> – Event Sub-Process Interrupting;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Signal Events&lt;/strong> – Event Sub-Process Interrupting;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Tasks&lt;/strong> – Manual, Business Rule and Script tasks;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Transaction&lt;/strong> – set of activities that logically belongs together;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Untyped Event&lt;/strong> – Throwing.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These BPMN elements are integrated into a complete Technical Perspective language through the addition of the UAM&#xD;
    elements defined within the Technical Entity, Location, and Role Viewpoint Languages.&amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
