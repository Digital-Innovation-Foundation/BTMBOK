<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-Q755ZApwvEyk94lrbvAzfg" name="uam_role_structure,_O_bHwOlLEdytvcf-4U2D3Q" guid="-Q755ZApwvEyk94lrbvAzfg" authors="DW Enstrom" changeDate="2015-11-30T17:05:17.798-0500" version="1.0.0">
  <mainDescription>&lt;p>&#xD;
    There are a number of choices made when defining and refining the (Technical) Roles Model. As shown in the&#xD;
    figure&amp;nbsp;below (the airport check-in example) there is a structure to the definitions of actors—actors may be&#xD;
    specialized. In any company there are always employees that have a standard set of privileges to access and use a set&#xD;
    of corporate-wide resources (e.g., HR services, email, Intranet, etc. through the employee role). Similarly, for&#xD;
    systems whose scope is smaller than the enterprise there are typically a base set of features and functions that all&#xD;
    users get—either through the employee role or through a system-specific role. Other kinds of employees are defined,&#xD;
    based upon the analysis of the system and its processes, which specialize their various activities and&#xD;
    responsibilities. In this example we have &lt;em>Agent&lt;/em>, &lt;em>Agent Manager&lt;/em> and &lt;em>Services Manager&lt;/em>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that these actors are functional definitions, not organizational—the model does not specify how the actors working&#xD;
    with the system are organized into a reporting structure within the organization, but rather are defined based upon&#xD;
    their interactions with (functions in) the system. A side benefit of this analysis is that these definitions and model&#xD;
    are excellent input into deciding upon an organizational structure. With some additional analysis (i.e., numbers,&#xD;
    management requirements, operational requirements, etc.) they can be transformed to organizational positions having&#xD;
    responsibility for certain processes and activities, however, this is considered to be out of scope for UAM&#xD;
    architecture development.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    After some analysis at the technical level it was determined that a &lt;em>Manager&lt;/em> should be defined that composes&#xD;
    &lt;em>HR Manager&lt;/em> and &lt;em>Budget Manager&lt;/em>. The question then remains should these access privileges (and required&#xD;
    skills) be simply associated with a &lt;em>Manager&lt;/em> or should these roles remain in the model. The most flexible&#xD;
    approach would be to leave them all in the model, in case these separate roles are required for some reason in the&#xD;
    future. This is an example of an Architecture Decision to analyze and a decision to document.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The roles within this model do not represent the activity with which they interact, but they do represent the&#xD;
    presentation layer (GUI) or interface. These roles therefore represent the boundary portion of the Technical Process&#xD;
    Model, the boundary that provides the access to the activities for both systems and actors. As in the Logical Roles&#xD;
    Model, the Technical Process Model captures all of the business activities, tasks, and processes, but with the&#xD;
    interface portion being represented in the Technical Roles Model—the process and roles models together define the&#xD;
    complete solution for Processes and required interactions with them. A very simple system may be defined by just using&#xD;
    a Process Model and indicating the role mappings in the activity descriptions template.&lt;br />&#xD;
    &amp;nbsp;&lt;br />&#xD;
    These roles also represent the skills required in interacting with the system. This aspect can be used in helping to&#xD;
    not only structure the roles but also in structuring the processes and actors. The separation out of the interface, as&#xD;
    represented by the roles, has several benefits. At the technical level these are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Explicit modeling of interfaces including the complete list of functions (depending upon the context and level of&#xD;
        detail desired;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Clear identification of roles and associated privileges related to GUI functions;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System or process wide view of interfaces, especially GUIs;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to analyze and optimize interfaces and roles, especially GUIs;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to analyze and optimize skills, as defined by roles, and associated actors;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Clear understanding of the IT security requirements and how roles are involved.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Draft Technical Roles Model&quot; src=&quot;./resources/Technical-Perspective_TRM-1.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The end result is definition of details in the technical models that will optimize the interfaces, their management and&#xD;
    the associated access controls. A better comprehension of the structure of user skills required, and interfaces in&#xD;
    support of complete processes results in a better user experience. This approach supports the concept of Roles Based&#xD;
    Access Control (RBAC) which may be used to define access privileges to IT resources within the architecture, most&#xD;
    conveniently defined in an RBAC grid or table.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In &lt;a href=&quot;http://www.building-requirements-consensus.com/use-case-example-2.html&quot; target=&quot;_blank&quot;>Cook Enterprise&#xD;
    Corporation (2009)&lt;/a> a case study reveals the problems with simply using roles in analyzing user interactions with&#xD;
    systems. Similar to this case study, UAM separates out the real world (users) from the set of actors (e.g. Customer or&#xD;
    Agent) that they may assume and the roles (e.g., Check-in Agent) that they have. The figure below, a simplified version&#xD;
    of the figure above, illustrates the power of this separation of users, actors, and roles.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Final Technical Roles Model&quot; src=&quot;resources/Technical-Perspective_TRM-2.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are two users in the diagram, Kathleen who is an &lt;em>Agent&lt;/em>, and Ian who is a &lt;em>Services Manager&lt;/em>.&#xD;
    Kathleen, as an &lt;em>Agent&lt;/em>, has the roles of &lt;em>Employee&lt;/em> since an &lt;em>Agent&lt;/em> is a type of&#xD;
    &lt;em>Employee&lt;/em>, and &lt;em>Ticket Agent&lt;/em> and &lt;em>Check-in Agent&lt;/em>. Since she works in a small remote airport,&#xD;
    she also has additional responsibilities for HR; therefore she also assumes the role of HR &lt;em>Manager&lt;/em> on&#xD;
    occasion. Ian on the other hand, as a &lt;em>Services Manager&lt;/em>, has the roles of &lt;em>Employee&lt;/em>,&#xD;
    &lt;em>Executive&lt;/em>, &lt;em>Manager&lt;/em>, &lt;em>HR Manger&lt;/em>, and &lt;em>Budget Manager&lt;/em>. As noted above, the roles of&#xD;
    &lt;em>HR Manager&lt;/em> and &lt;em>Budget Manager&lt;/em> could be collapsed into &lt;em>Manager&lt;/em>; however this would result in&#xD;
    Kathleen having more access to processes and services than required since she needs the role of &lt;em>Manager&lt;/em>.&#xD;
    Depending on the specifics of the system and organization, this may be acceptable—however it is definitely better from&#xD;
    an IT management and security perspective to keep them separate.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
