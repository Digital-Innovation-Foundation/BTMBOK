<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-RdLzctH9dNrpXj5LLn_Jtw" name="uam_modeling_basics,_G1fJUOMCEdy7f9KmjDtwsA" guid="-RdLzctH9dNrpXj5LLn_Jtw" authors="DW Enstrom" changeDate="2015-02-24T10:08:52.745-0500" version="2.0.1">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;XE_Modeling__Basics&quot; name=&quot;XE_Modeling__Basics&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    IT architecture cannot be done properly without modeling the system. There are many known advantages to visual&#xD;
    modeling, not the least of which is the &quot;understanding of complex systems&quot;. What can be more complex that a complete&#xD;
    enterprise, or even a business line or business&amp;nbsp;domain&amp;nbsp;within an enterprise? Visual modeling is therefore key&#xD;
    if one is to do a proper job of IT architecture, especially for large systems. But the question may be asked: why do IT&#xD;
    architecture? Again there are many well documented responses to this questionâ€”the reasons may be summarized as follows:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Alignment&lt;/strong> - align&amp;nbsp;IT with business needs and goals;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Optimization&lt;/strong> - definition of an IT environment that works better for the business;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Understanding&lt;/strong> - with understanding (or the enterprise and its processes/system) comes insight,&#xD;
        which support the two points above, plus perhaps those breakthroughs that bring the enterprise to a whole other&#xD;
        level.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The following concepts and approaches are used to deal with this complexity and providing usable models are described&#xD;
    below:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#visual_model&quot;>Visual Modeling&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#soln_part&quot;>System Partitioning&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#model_concepts&quot;>Modeling Concepts:&lt;/a> &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#aggregation&quot;>Aggregation&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#associations&quot;>Associations&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#structure&quot;>Structured Classes&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#general&quot;>Generalization&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#abstract&quot;>Abstraction / Encapsulation&lt;/a>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#important&quot;>Important EA Modeling Elements&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#model_diagrams&quot;>Model&amp;nbsp;Diagrams&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#model_maint&quot;>Creation and Maintenance&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;visual_model&quot; name=&quot;visual_model&quot;>Visual Modeling&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Most people actually do get 1000 words from a picture; in other words, visually modeling really does have benefits.&#xD;
    Understanding complex systems, or even developing a detailed model of a complex system, cannot happen without doing&#xD;
    visual modeling. But visual modeling isn't enough on its own, we need to also add some modeling concepts and constructs&#xD;
    to help out, namely abstraction (conceptualization) and encapsulation. These concepts help one deal with the&#xD;
    complexity, permitting the construction of very complex models that fully describe the target, but at the same time can&#xD;
    be understood. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_modeling&quot; target=&quot;_blank&quot;>Wikipedia: Visual&#xD;
    Modeling&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The audience for the models is important as well; these models need to be understood by business people, project&#xD;
    managers and designers and by the implementation people. How do we accomplish this? Through the use of multiple views&#xD;
    of the enterprise in question (e.g., system partitioning, see below), and through the use of abstraction and other&#xD;
    techniques.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;soln_part&quot; name=&quot;soln_part&quot;>System Partitioning&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following definitions differentiates between the notions of &lt;em>layers&lt;/em> and &lt;em>partitions&lt;/em>. The term&#xD;
    &lt;em>tier&lt;/em>, while common in describing the logical architecture of a solution, is not often used in the IT&#xD;
    architecture context. The terms &lt;em>layer&lt;/em> and &lt;em>partition&lt;/em> are better descriptions of partitioning notions&#xD;
    used within IT&amp;nbsp;architectures.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Layer&#xD;
&lt;/h5>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        A grouping modeling elements that are all&amp;nbsp;at the same level of abstraction within a model. See also:&amp;nbsp;&lt;a&#xD;
        class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/termdefinitions/uam_layer_A225754E.html&quot;&#xD;
        guid=&quot;_h0cOIEf0EeO1kIuJLP1Ztg&quot;>Term Definition: Layer&lt;/a>;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A layer represents a horizontal slice through an architecture at a given level of abstraction,&amp;nbsp;but a partition&#xD;
        is a vertical slice which is typically a &quot;functional&quot; slice.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h5>&#xD;
    Partition&#xD;
&lt;/h5>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        A&amp;nbsp;portion of a model that organizes the elements based upon functional considerations.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A partition represents a vertical (functional) slice through an architecture, whereas a layer represents a&#xD;
        horizontal slice.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    Therefore in the context of UAM IT architecture, &lt;em>layer&lt;/em> and &lt;em>partition&lt;/em> are equated to&#xD;
    &lt;em>perspective&lt;/em> and &lt;em>aspect&lt;/em> respectively, as illustrated in the Figure 1 below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img alt=&quot;Unified Architecture Method - model views and aspects&quot; src=&quot;./resources/Welcome_graphic.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;strong>Figure&amp;nbsp;1 - The UAM Framework Perspectives, Aspects and Viewpoints&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The &lt;em>Perspectives&lt;/em> defined in Figure 1 start at the business level (Business Perspective) and get more technical&#xD;
    and closer to the implementation as one works down to the Technology Perspective, with each of these Perspectives being&#xD;
    composed of four models: Data (entity), Activity, Location, and People (actors and role). Layering&amp;nbsp;within each&#xD;
    Perspective is also possible, permitting the drill-down&amp;nbsp;to more and more detail (and complexity) as&#xD;
    required.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The &lt;em>Aspects&lt;/em> as defined in Figure 1, on the other hand, are vertical slices through the architecture, each one&#xD;
    focused on a particular aspect of the architecture.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;model_concepts&quot; name=&quot;model_concepts&quot;>Modeling Concepts&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;aggregation&quot; name=&quot;aggregation&quot;>Aggregation / Composition&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Aggregation is used to structure models through the composition of elements, and permit re-use of model elements. For&#xD;
    example, a car is an aggregation of it's various parts: body, wheels, tires, etc. See &lt;a&#xD;
    href=&quot;http://en.wikipedia.org/wiki/Object_composition&quot; target=&quot;_blank&quot;>Wikipedia: Object Composition&lt;/a>&amp;nbsp;and &lt;a&#xD;
    href=&quot;http://en.wikipedia.org/wiki/Class_diagram#Aggregation&quot; target=&quot;_blank&quot;>Wikipedia: Aggregation&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;associations&quot; name=&quot;associations&quot;>Associations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Associations are used to define simple relationships between model elements. Associations are&amp;nbsp;used for a number of&#xD;
    different reasons. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Association_(object-oriented_programming)&quot;&#xD;
    target=&quot;_blank&quot;>Wikipedia: Association&lt;/a>&amp;nbsp;and &lt;a href=&quot;http://en.wikipedia.org/wiki/Class_diagram#Association&quot;&#xD;
    target=&quot;_blank&quot;>Wikipedia: Class Diagram - Association&lt;/a>.&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;general&quot; name=&quot;general&quot;>Generalization&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Generalization structures are used to capture common properties between classes. Specialization is the opposite of&#xD;
    generalization. See: &lt;a href=&quot;http://en.wikipedia.org/wiki/Class_diagram#Generalization&quot; target=&quot;_blank&quot;>Wikipedia:&#xD;
    Generalization&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;abstract&quot; name=&quot;abstract&quot;>Abstraction / Encapsulation&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The term encapsulation is often used interchangeably with information hiding, while some make distinctions between the&#xD;
    two. It seems that people, however, fail to agree on the distinctions between information hiding and encapsulation&#xD;
    though one can think of information hiding as being the principle and encapsulation being the technique. A software&#xD;
    module hides information by encapsulating the information into a module or other construct which presents an interface.&#xD;
    This technique is used to hide detail at one level, then providing a more detailed lower level view. One could view&#xD;
    this as the same as layering, however it is not quite the same. Layering partitions the views based upon various&#xD;
    organizational constructs such as the application layer, or middleware layer, which generally have to do with software&#xD;
    or hardware layers. Encapsulation on the other hand defines simpler abstractions of various concepts or constructs,&#xD;
    such as &quot;Human Resources&quot; which will eventually be further partitioned in various sub-activities. Also see: &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/concepts/uam_levels_and_views_499BC4B8.html&quot;&#xD;
    guid=&quot;_W4UEAMqpEdy25fQyv59CjQ&quot;>Concept: Architecture Perspectives and Viewpoints&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;important&quot; name=&quot;important&quot;>Important Modeling Elements&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    Entity&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An &lt;em>entity&lt;/em> represents a significant and persistent piece of information that is manipulated by business roles.&#xD;
    Entities are passive; that is, they do not initiate interactions on their own. A entity might be used in many&#xD;
    different&amp;nbsp;business processes,&amp;nbsp;and usually outlives any single interaction. Entities are produced and consumed&#xD;
    by multiple business activities&amp;nbsp;and tasks that together form a business process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The notion of entity goes from conceptual at the business level to a more concrete at the technology level. See: &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/workproducts/uam_business_entity_41C9A5C4.html&quot;&#xD;
    guid=&quot;_cF_bwM54Edymj4NXv8-FYA&quot;>Artifact: Business Entity&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Activity&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An activity provides value-added business benefit while producing and consuming entities. Business roles may interact&#xD;
    with these activities/tasks. An activity&amp;nbsp;includes the notion of process and task, and is identical to the&#xD;
    definition within the Business Process Modeling Notation (See: &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/whitepapers/uam_bpmn_intro_tutorial_426154F6.html&quot;&#xD;
    guid=&quot;_gYTbgN2MEdyVUKFKTmaZUA&quot;>Whitepaper: BPMN - an Introductory Tutorial&lt;/a> ).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The notion of activity goes from conceptual at the business level to a more concrete at the technology level. See: &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/workproducts/uam_business_activity_FC6A438C.html&quot;&#xD;
    guid=&quot;_0q0KgM56Edymj4NXv8-FYA&quot;>Artifact: Business Activity&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Location&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Locations&amp;nbsp;are a categorization (based upon&amp;nbsp;the business activities supported) of&amp;nbsp;locations&#xD;
    with&amp;nbsp;business systems under the authority of the enterprise (or portion) in question.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The notion of entity goes from conceptual at the business level to a more concrete at the technology level. See:&lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/guidelines/uam_business_location_4488DF4B.html&quot;&#xD;
    guid=&quot;_h4H5AOSeEdyYxtlRIMoTnw&quot;>Guideline: Business Location&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/workproducts/uam_business_location_B94472F1.html&quot; guid=&quot;_ZB_koM6LEdymj4NXv8-FYA&quot;>Artifact:&#xD;
    Business Location&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Role&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Roles are a categorization, based upon required interaction with the business, of external interactions with the&#xD;
    business systems.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The notion of role goes from conceptual at the business level to a more concrete at the technology level. See: &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/workproducts/uam_business_role_F453EB19.html&quot;&#xD;
    guid=&quot;_uByisM5nEdymj4NXv8-FYA&quot;>Artifact: Business Role&lt;/a>, &amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/workproducts/uam_business_actor_EB327D4A.html&quot; guid=&quot;_g6DIUMDbEeOx56fQBc88vA&quot;>Artifact: Business&#xD;
    Actor&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_user-actor-role_8210ACA7.html&quot; guid=&quot;_r8jW8OPQEdy7f9KmjDtwsA&quot;>Guideline:&#xD;
    Users, Actors and Roles&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Events&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Events represent important occurrences in the day-to-day tasks of the business. See:&amp;nbsp;&lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/guidelines/uam_business_event_82E69349.html&quot;&#xD;
    guid=&quot;_sWMqgE13EeOcVJX_gvTjyg&quot;>Guideline: Business Event&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Rules&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A rule or business rule is a declaration of policy or a condition that must be satisfied; they direct or modify the&#xD;
    execution of process and activities. See:&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../UAM/guidances/guidelines/uam_business_rule_31D639DC.html&quot; guid=&quot;_KNNucFIWEeOcVJX_gvTjyg&quot;>Guideline:&#xD;
    Business Rule&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;model_diagrams&quot; name=&quot;model_diagrams&quot;>Model Diagrams&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A &lt;b>model&lt;/b> is a &lt;i>representation&lt;/i> of a system, typically addressing some particular area of concern.&amp;nbsp;The&#xD;
    system, possibly and enterprise architecture, is represented by a &lt;em>set&lt;/em> of models since&amp;nbsp;there are multiple&#xD;
    concerns (and stakeholders) that need to be modeled and addressed. Each model (within a viewpoint: a view)&amp;nbsp;is also&#xD;
    constructed with varying levels of abstraction, from the more general, hiding or encapsulating detail, to the more&#xD;
    specific, exposing more detail and explicit design decisions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The&lt;strong>&amp;nbsp;viewpoints,&lt;/strong> mentioned above, are&amp;nbsp;captured in&amp;nbsp;models which show&amp;nbsp;the&#xD;
    things&amp;nbsp;that are relevant for that particular viewpoint. These models are typically illustrated by&#xD;
    visual&amp;nbsp;&lt;b>diagrams&lt;/b> of some kind.&amp;nbsp;The intersection of the Perspective and Aspect define a viewpoint to be&#xD;
    used to capture the architecture at a given&amp;nbsp;level of abstraction,&amp;nbsp;as shown in Figure1. Each of these&#xD;
    viewpoints may include one or more models (or views). The architecture is captured in a set of models (and diagrams&#xD;
    that visualize them) that express the architecture from various viewpoints and abstraction levels. As shown in the&#xD;
    model Figure 1, there is a set of&amp;nbsp;models (viewpoint) for every Perspective-Aspect combination.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Creation and &lt;a id=&quot;model_maint&quot; name=&quot;model_maint&quot;>Maintenance&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Typically all perspectives are created top-down, starting with the Business level, then the Logical and Technical&#xD;
    levels are defined. Variations of this approach are certainly possible, as required by the objectives of the IT&#xD;
    architecture. This is illustrated in one of the example IT architecture where only the Technical level locations models&#xD;
    are defined. See: &lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/customcategories/eg_bls_tp_72C57BF1.html&quot;&#xD;
    guid=&quot;_dMco4MJpEeKSedlRPHdUIQ&quot;>IT Research Network TLM&lt;/a>. This architecture is leveraged from existing architectures.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A complete Business Perspective is always required, at some level of detail (context), since IT architects and business&#xD;
    managers need to understand this model in order to make informed decisions regarding strategies, plans and evolution.&#xD;
    The Logical level may not be required, if the business, and to some extent the technologies used, do not change&#xD;
    drastically. The Logical level is where the major (structural) decision are made, generally based upon the business&#xD;
    processes in combination with the technologies chosen to support them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Existing system architectures are created at the Technical level. They are defined bottom-up since existing&#xD;
    documentation is used, which defines the system at this level; typically the as-built level.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
