<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-9lMayWnjmo4X0P5SGzkjLw" name="new_supporting_material,_s1kzEHXGEeWYK9_iTBfrTQ" guid="-9lMayWnjmo4X0P5SGzkjLw" changeDate="2015-12-19T14:38:53.687-0500">
  <mainDescription>&lt;h3>&#xD;
    Beginnings&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One of my first managers always said that “computer science” and “software engineering” were misnomers. His view was&#xD;
    that there was no “science” involved in computer science, and definitely not “engineering”. Others have had this view&#xD;
    as well, notably Michael Davis (Davis 2011, 32), and only recently has some of the science in computer science been&#xD;
    described and acknowledged (Denning 2013, 35). This struck a chord with me and I wondered for many years why so many&#xD;
    information technology (IT) projects fail, why we spend sometimes millions of dollars only to end up with systems that&#xD;
    either did not work properly or do not meet requirements, or both. In fact, I spent the rest of my career trying to&#xD;
    understand the science and engineering of IT with, I hope, some degree of success.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This book is the culmination of more than thirty-five years of experience and study of IT and its application. Its&#xD;
    primary objective is to describe a more rigorous approach to IT architecture that brings science and engineering&#xD;
    disciplines into the process where possible. The approach is model-based, as is the work in many engineering&#xD;
    disciplines, and follows a well-defined logical process for the creation of these models and other deliverables. The&#xD;
    approach also unifies IT architecture—the same IT architecture process and deliverables may be applied anywhere within&#xD;
    the enterprise (or even across enterprises) with all architecture definitions being useful and relatable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This naturally requires some discipline on the part of IT architects and developers to ensure that these separate IT&#xD;
    architectures remain consistent and compatible; therefore, clear definitions of techniques and deliverables along with&#xD;
    a methodology for their development is needed—the Unified Architecture Method (UAM) described in this book. The&#xD;
    complete methodology is published in the form of a web site, and is available online at:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://www.unified-am.com/UAM/&quot;>www.unified-am.com/UAM/&lt;/a>&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Now some background on information technology, how it has evolved and some key definitions that aid in understanding&#xD;
    the reasons for the structure and approach to IT architecture as defined in the UAM.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Evolution of IT Development&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Information technology, as it is now known, is a comparatively young field. Electronic computing began in the 1940s,&#xD;
    but the use of computers for business purposes did not happen in earnest until the 1960s. The programmability of&#xD;
    computers evolved along with the hardware, with high-level languages becoming the norm.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Hardware and software systems became more and more complex over time. To deal with this complexity a number of tools&#xD;
    and techniques were developed, such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        High-level languages;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Standard algorithms such as Quicksort;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Object-oriented languages;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Structured programming;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Multi-user, multi-tasking operating systems;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Commercial software such as VisiCalc and Microsoft Word;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Entity-relationship diagrams;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Database design tools.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Many other techniques, algorithms, and tools were developed through the 1980s—then came the Internet and pervasive&#xD;
    networking. Not only were home computers connected to the Internet, businesses used networking to advantage internally&#xD;
    and externally, along with all of the standard office tools and software, such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Web browsers;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        E-mail;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Workflow;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Powerful desktops with a set of integrated applications;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Newsgroups, blogs, and other information sharing tools;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Distributed, grid, and cloud computing.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The advent of network-based computing dramatically changed IT forever. Systems are now connected at all layers, from&#xD;
    network connectivity at the physical and transport layers to peer-to-peer interactions at the application layer, and&#xD;
    everything in between. These layers and connectivity have substantially increased the level of complexity and the size&#xD;
    of interconnected systems since the 1950s and 1960s.&lt;br />&#xD;
    How does this relatively rapid evolution of IT in recent years, this “computing revolution”, compare to the Industrial&#xD;
    Revolution? Can we learn anything from this comparison? Most definitely, with the principle areas being:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The difficulty in discovering and developing appropriate science and engineering disciplines;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The time it takes to mature tools, techniques, development, and implementation approaches; and,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The underlying discipline required to rigorously define and develop proper solutions.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Industrial Revolution had a profound effect upon business and industry, which is mirrored in many ways in the&#xD;
    current “computing revolution”. A comparison of the two provides further insights into IT and the tools and techniques&#xD;
    that are important for its use and exploitation.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Industrial Revolution vs. Computer Revolution&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Industrial Revolution, which started in the eighteenth century, was marked by a period of rapid change to many&#xD;
    industrial processes. These include, among others, farming, manufacturing, and transportation. The period of the&#xD;
    revolution is up for debate but is generally agreed that it lasted from about 1760 until about 1940. The Industrial&#xD;
    Revolution did not reach fruition until the widespread introduction of electricity and the electric motor in the late&#xD;
    1800s and industry was further revolutionized by the assembly-line concept for factories, and other improvements, in&#xD;
    the twentieth century. Therefore, one could argue that the Industrial Revolution took 150 to 200 years to reach a&#xD;
    refined state of maturity—maturity of techniques, processes, tools, and technology (Encyclopædia Britannica, Inc. 1988,&#xD;
    304).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    What tools and techniques enabled the continued advancements during the Industrial Revolution? In a nutshell those&#xD;
    provided by science and engineering. Many engineering disciplines originated and were refined during this period, most&#xD;
    notably chemical engineering, electrical engineering, civil engineering, and mechanical engineering (Encyclopædia&#xD;
    Britannica, Inc. 1988, 305). The development and maturing of these disciplines, in essence, captured the knowledge of&#xD;
    materials, chemistry, tools, and techniques in a way that made them accessible and useful for the next wave of&#xD;
    engineers. This body of knowledge was continually refined and built upon to the point where the engineering approach to&#xD;
    problems was developed. These engineering disciplines and the associate bodies of knowledge were fully recognized and&#xD;
    utilized.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    On the other hand, the Computing Revolution, being only about 60 to 70 years old should be viewed as being quite&#xD;
    immature in terms of techniques, tools, and technology. Compared to the Industrial Revolution time lines, the Computing&#xD;
    Revolution is in the early stages of development of the techniques needed to implement improved solutions for the&#xD;
    information age. What further parallels can be drawn with the Industrial Revolution?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As noted, the huge success and impact of the Industrial Revolution resulted from the capture and refinement of&#xD;
    knowledge, as well as the development of a disciplined engineering approach. This permitted the design and&#xD;
    implementation of more and more complex and refined industrial processes and solutions, with very high assurance of&#xD;
    success. The use of and dependence upon science and mathematics was very important.&lt;br />&#xD;
    Similar steps were taken in the Computer Revolution with the refinement of techniques, processes, tools, and&#xD;
    technology. What has to happen is the emergence of a disciplined approach similar to the engineering approaches&#xD;
    developed during the Industrial Revolution. Some would argue that the Computer Science or Computer Engineering&#xD;
    disciplines fill this void. This is only partially true because more science and engineering is needed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A mathematical foundation is another characteristic of the engineering disciplines developed during the Industrial&#xD;
    Revolution. Mathematics was used to validate the design and to develop new proven approaches, resulting in a reduction&#xD;
    of risk and very high success rates. Some mathematical rigor is used in IT development, but a greater acceptance of the&#xD;
    need for rigor and a more consistent, disciplined approach to problems and the definition of solutions are required.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, when deciding on the solution to the construction of a new bridge, three basic steps are involved, with&#xD;
    engineering being an important part of each step. First, requirements are defined agreed such as location, number of&#xD;
    lanes, and design constraints (e.g., no piers in the water and the clear space required above the water). Engineering&#xD;
    is needed at this stage to ensure the requirements definitions include all aspects and constraints needed in the next&#xD;
    steps. The design team then takes the functional requirements and design constraints and develops the conceptual design&#xD;
    followed by detailed design and working drawings. Finally a construction team implements the solution based upon the&#xD;
    detailed design and working drawings, but under the scrutiny of the requirements engineer and design engineer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    What further refinements are required in the IT context to arrive at a more rigorous and successful approach similar to&#xD;
    this civil engineering example? In the industrial context nothing happens until a clear (and formal) agreement is&#xD;
    obtained on the requirements and the overall concept and approach. This is followed by preliminary designs and then&#xD;
    detailed design and engineering, with approvals being obtained all along the way. This all happens regardless of the&#xD;
    context and size of the project. A lot of work is done prior to breaking ground. Therefore, in the IT context a similar&#xD;
    rigorous approach is needed, regardless of the context and size of the project—architecture is required, regardless of&#xD;
    the system development approach used. This is what UAM does for IT architecture and design. It defines the approach&#xD;
    (i.e., the methodology) and the tools and techniques (i.e., the viewpoints and associated modeling languages) required&#xD;
    for a more rigorous definition of solutions.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Architecture vs. Engineering&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A final important question is what is &lt;em>architecture&lt;/em> vs. &lt;em>engineering&lt;/em>? In the IT context, where are each&#xD;
    of these disciplines applied, or are they slightly different in the IT context versus the industrial context? Let us&#xD;
    examine how &lt;em>form&lt;/em> and &lt;em>function&lt;/em> help to differentiate the disciplines of architecture and engineering.&#xD;
    We begin with formulating precise definitions of &lt;em>architecture&lt;/em> and &lt;em>engineering&lt;/em>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Architecture is the “art or science of building” (Oxford University 1976, 49), but in the IT context it should be&#xD;
    extended to include “and discipline of creating an actual plan of any complex information object or system”. ISO 42010&#xD;
    defines architecture as “the fundamental organization of a system embodied in its components, their relationships to&#xD;
    each other, and to the environment, and the principles guiding its design and evolution” (ISO 2011, 2). Note that&#xD;
    architecture involves the definition of the complete system. Therefore, by implication, the context and scope of the&#xD;
    system in question is very important. Encyclopædia Britannica defines it as “the art and technique of building as&#xD;
    distinguished from skills associated with construction” (Encyclopædia Britannica, Inc. 1988, 530). Therefore,&#xD;
    architecture is a design discipline that concerns itself with aesthetics as well as utilitarian&#xD;
    considerations—architecture is the balance of &lt;em>form&lt;/em> and &lt;em>function&lt;/em> in meeting the requirements. This&#xD;
    should not be confused with the debatable “form follows function” principle prevalent in twentieth century building&#xD;
    architecture, where the shape and structure of a building is primarily based upon its function, and where in the&#xD;
    extreme decoration on buildings is outlawed (Encyclopædia Britannica, Inc. 1988, 50).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Engineering is “the application of scientific principles to the optimal conversion of natural resources into&#xD;
    structures, machines, products, systems, and processes for the benefit of mankind” (Encyclopædia Britannica, Inc. 1988,&#xD;
    496). “Scientific principles” refers to the rigor involved in the engineering discipline, which includes mathematics,&#xD;
    chemistry, and material sciences, among many others. Each engineering discipline has an associated “great body of&#xD;
    special knowledge” (Encyclopædia Britannica, Inc. 1988, 496). In summary, engineering is the application of a large&#xD;
    body of specialized knowledge along with scientific principles to develop a solution to the practical problem at hand&#xD;
    that will be both economical and safe. Engineering has a very strong emphasis on function and takes a scientific&#xD;
    approach, and therefore is viewed as a more specific definition of &lt;em>design&lt;/em> that is very close to&#xD;
    implementation. Therefore, engineering is a design discipline that concerns itself mostly with utilitarian&#xD;
    considerations backed by scientific principles—&lt;em>function&lt;/em> is the key.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Which discipline is best applied in the context of IT systems? Both—an overall plan (architecture) is definitely&#xD;
    required, especially for large IT systems or new IT systems, but engineering rigor is required in order to achieve the&#xD;
    desired result in an efficient and cost effective manner with some assurance of success. Because of engineering rigor,&#xD;
    airplanes, bridges, buildings, and other engineered solutions very rarely fail. The same cannot be said of IT&#xD;
    solutions. They often cost too much to build, fail when put into operation, and even worse cost a great deal to keep&#xD;
    operating. In the IT context, architecture is needed along with engineering to address these ongoing issues. Add in the&#xD;
    problem of growing complexity and it becomes very clear that a more rigorous approach to IT is needed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Given this overview of engineering and architecture, can we clarify their definitions and application in the IT&#xD;
    context? IT architecture defines the overall concept and plan through the application of an architectural approach, and&#xD;
    carries on until rigorous designs are needed, then IT engineering becomes the main focus. Depending upon the context of&#xD;
    the work, a lot or little overlap of the activities exists between these two disciplines. IT engineering, where a great&#xD;
    body of knowledge and scientific principles are used to detail IT solutions, requires further exploration and details&#xD;
    defined; however, that is a topic for another book. This book describes a concept for the definition of IT&#xD;
    architecture, at any level and in any context within the enterprise, with its scope of application and involvement&#xD;
    reduced when IT engineering (detailed technical design) begins.&lt;br />&#xD;
    One could argue that IT architecture, as defined, is part of IT engineering, especially since in the industrial context&#xD;
    engineering is applied from concept to construction. However, architecture is applicable in many situations, where form&#xD;
    is often as important as function—where conceptual and functional blocks (e.g., rooms, stairs, doors, etc.) are&#xD;
    arranged to address requirements. In the IT context these conceptual and functional blocks (or components) are things&#xD;
    such as applications, processes, data, storage, servers, and networks. Therefore, architecting these components is a&#xD;
    very important part of defining IT solutions. In other words, architecture is the definition of a plan for components&#xD;
    (form) that are almost arbitrarily arranged to solve a given requirement (e.g., consider the number of different kinds&#xD;
    buildings in the world, all defined using the same building blocks; or the many IT systems that provide the same&#xD;
    functionality but have very different architectures).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Architecture is about balancing form and function, the two are distinguishable but not separable—they are closely&#xD;
    related and influence each other. The following definition for IT architecture is an extension (extensions in italics)&#xD;
    of the definition of architecture in ISO 42010 (ISO 2011, 2).&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        &lt;strong>IT Architecture&lt;/strong> is the fundamental concepts or properties &lt;em>and organization&lt;/em> of a system in&#xD;
        its environment (i.e., in context) embodied in its elements &lt;em>that are almost arbitrarily arranged&lt;/em>, their&#xD;
        relationships, and in the principles guiding its design and evolution—&lt;em>defining the form (of elements) is the&#xD;
        main objective, but balancing form and function is key&lt;/em>.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    On the other hand, engineering is more restrictive, and generally starts after the architecture is defined (i.e., the&#xD;
    component parts of a bridge, and their relationships, are defined for example: piers, abutments, spans, etc.);&#xD;
    therefore, one engineers a bridge or a building after its architecture is defined. Therefore, engineering is defined as&#xD;
    follows:&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        &lt;strong>Engineering&lt;/strong> is a more restrictive design activity where the components and their relationships are&#xD;
        already defined (i.e., the architecture is defined) and now scientific rigor and precision is applied to ensure&#xD;
        success—function is key.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    UAM&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The main lesson from the Industrial Revolution is that IT is at a very early stage of development. Therefore, a lot of&#xD;
    knowledge about how to solve problems in this domain is yet to be discovered, but that a disciplined engineering&#xD;
    approach will move us in the right direction. This knowledge, and the associated processes and supporting science and&#xD;
    mathematics, needs to be captured and made available to practitioners and built upon over time. The end goal is a more&#xD;
    rigorous, repeatable and successful approach to the definition and implementation of IT solutions. In the IT context,&#xD;
    architecture is very important since a balance is needed between the form and function of the components&#xD;
    involved—selecting the required set of components and specifying their relationships is an important first step.&lt;br />&#xD;
    The complexity and interdependence of today’s IT environments demands that we adopt this rigorous and disciplined&#xD;
    approach to their definition, similar to the disciplines now used in industrial design and engineering. UAM defines&#xD;
    this disciplined approach to IT architecture, including its usage in any context within an enterprise. This methodology&#xD;
    describes the approach for developing, using and maintaining IT architectures, and is also a first step in capturing an&#xD;
    “IT knowledge base”. Chapter 2 in particular examines IT architecture in detail and how to use it within&#xD;
    enterprises.&lt;br />&#xD;
    A well-defined and understood framework and methodology is very important in order to be successful in defining IT&#xD;
    solutions. Examples are also very useful for both the new practitioner as well as seasoned veterans, to ensure that the&#xD;
    methodology is well understood and consistently applied. This book and the UAM methodology&amp;nbsp;provide this complete&#xD;
    understanding of the approach and its application.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Why UAM?&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A big question at this point may be “why define yet another methodology”? There are many methodologies currently&#xD;
    available; however, there are a number of fundamental problems with all of these existing approaches:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        They address only the Enterprise Architecture (EA) level;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The models required by these methodologies are often arbitrary;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Modeling languages are not defined or are ill-defined resulting in even more inconsistency and arbitrariness;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Architectural Decisions, the analysis and documentation of decisions, are not well addressed if at all in other&#xD;
        approaches;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The level of coverage of the “system” being architected is unspecified or unknown;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The maintenance phase of the system life-cycle is often missing;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        These methodologies are quite inflexible and inadaptable to the needs of the enterprise.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A brief comparison of UAM with the main methodologies currently in use is contained within UAM: &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../UAM/guidances/whitepapers/uam_uam_vs_other_methodologies_AC4C65A6.html&quot;&#xD;
    guid=&quot;_DHi5kGlAEeW7Kr-mwRqUQQ&quot;>UAM vs. Other Methodologies&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The key insights coming out of this high-level comparison are that UAM may be applied to any context or situation, and&#xD;
    if done wisely, the resulting architectures will directly relate to and complement higher or lower level architecture&#xD;
    efforts through the notion of fractal architectures. The clear separation of concerns in UAM along with levels of&#xD;
    abstraction and encapsulation facilitate this unified, integrated and connected approach to IT architecture within the&#xD;
    enterprise. The IT security concepts in UAM (&lt;em>Authority&lt;/em>, &lt;em>Domain&lt;/em>, &lt;em>Zone&lt;/em>, etc.) not only address&#xD;
    the need to architect-in security, but they also facilitate managing complexity and defining architecture fractals&#xD;
    through a hierarchical approach to the definition of Domains and Zones. Finally, the notion of &lt;em>Location&lt;/em> and&#xD;
    &lt;em>People&lt;/em> aspects are not well represented in other approaches to IT architecture, resulting in incomplete&#xD;
    architectures.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Existing methodologies have confusing frameworks, with little in the way of an underlying metamodel and logical&#xD;
    approach to the specification of their models. The one possible exception is TOGAF (The Open Group Architecture&#xD;
    Framework), but even it does not have a very robust underlying metamodel nor logical approach to the definition of&#xD;
    artifacts for the various stakeholders involved.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    UAM provides complete coverage of all possible aspects along with the perspectives required to provide complete&#xD;
    architectural descriptions for many different stakeholders and sets of stakeholders. These descriptions address all&#xD;
    interrogatives (aspects), and therefore should provide complete architectures. It is unclear if other approaches&#xD;
    provide this complete coverage. Often the frameworks seem organized almost arbitrarily, resulting in unknown&#xD;
    relationships between models and questionable and confusing coverage of the architecture of the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another way to compare architectural frameworks is their coverage of the phases of the system development life-cycle.&#xD;
    Most frameworks provide good coverage of the planning, analysis, design, and implementation phases; however, the&#xD;
    maintenance phase is poorly covered in all frameworks, except perhaps TOGAF (Urbaczewski and Mrdalj 2006). UAM, like&#xD;
    Zachman, treats IT architectures as assets to be valued, used, reused, and maintained. Within the UAM methodology clear&#xD;
    methods are defined for creating architectures, reviewing architectures under development and reviewing existing&#xD;
    architectures and updating them if necessary. The maintenance phase is specifically addressed and is viewed as very&#xD;
    important in UAM. Maintenance is also aided through the definition and management of Architectural Decisions—all&#xD;
    important IT decisions are documented, followed, reviewed, and revised over time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In summary, UAM provides a more logical approach to the definition of IT architectures, including their usage and&#xD;
    maintenance in the long term. Most existing approaches have an almost arbitrary approach and architectural model&#xD;
    structure, leaving it very much in doubt that complete architectures are defined. The usage and relationships between&#xD;
    these models is very confusing for both architects and stakeholders. UAM defines a well founded and logical approach to&#xD;
    the definition of models along with the relationships between them and how they are to be defined and used.&#xD;
    Completeness of the architecture is also ensured through this logical approach and supported by the well-defined&#xD;
    framework. Finally, UAM may also be applied within any context within the enterprise, from the complete enterprise&#xD;
    itself (i.e., EA) down to individual sub-organizations or systems.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Goals of UAM&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    UAM may be viewed as the merging of (a modified subset of) The Zachman Framework, Model Driven Architecture (MDA),&#xD;
    Business Process Model and Notation (BPMN), the Unified Modeling Language (UML), and other standards into a complete&#xD;
    set of modeling languages along with a methodology that addresses the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Applicability and alignment at and between all architectural levels: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Enterprise;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Business Line;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Business Department;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Business Division;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Business Unit;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Component.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Unified architectural models through the definition of: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Business, Logical, and Technical perspectives (levels);&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Data, Activity, Location, and People modeling aspects;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Separation of concerns into twelve viewpoints (models);&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Standardized and interrelated viewpoints;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Consistent and standardized language for viewpoints;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Standard architectural language and concepts within and between viewpoints;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Consistent and related architecture definitions (i.e., models at different enterprise levels are IT&#xD;
                architecture “fractals”).&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The transformation of business concepts and concerns into IT concepts and concerns layer by layer, providing&#xD;
        traceability back to business needs;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support better decision-making, with persistence (i.e., preservation of corporate knowledge and corporate&#xD;
        decisions);&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Consistent management of complexity through encapsulation and decomposition;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support a Model-Driven Architecture (MDA) approach—MDA and the Model-Driven Enterprise (MDE) (OMG 2001);&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Stakeholder-friendly and understandable models targeting their different concerns;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Coherent ways for using IT architectures through the notions of Language, Blueprint, Decision, and Literature&#xD;
        (Smolander, Rossi and Purao 2005);&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A rigorous and repeatable architecture methodology.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Another important goal was to not reinvent the wheel. Every effort was made to use existing standards, either industry&#xD;
    or de-facto. ISO 42010 and BPMN are central to UAM along with The Zachman Framework. MDA concepts, the Information&#xD;
    Technology Infrastructure Library (ITIL), and other standards also influenced the definition of UAM. MDA is important&#xD;
    since a basic principle is that models are the system, they are not throw-away.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Model Driven Architecture (MDA), Business Process Model and Notation (BPMN), and the Unified Modeling Language (UML) on&#xD;
    the Internet:&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        OMG MDA:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://www.omg.org/mda/&quot;>http://www.omg.org/mda/&lt;/a>&lt;br />&#xD;
        OMG BPMN:&amp;nbsp;&amp;nbsp; &lt;a href=&quot;http://www.bpmn.org/&quot;>http://www.bpmn.org/&lt;/a>&lt;br />&#xD;
        OMG UML:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://www.uml.org/&quot;>http://www.uml.org/&lt;/a>&lt;br />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    A summary of MDA from OMG:&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p class=&quot;quote&quot;>&#xD;
        “MDA development focuses first on the functionality and behavior of a distributed application or system,&#xD;
        undistorted by idiosyncrasies of the technology platform or platforms on which it will be implemented. In this way,&#xD;
        MDA divorces implementation details from business functions. Thus, it is not necessary to repeat the process of&#xD;
        defining an application or system’s functionality and behavior each time a new technology (Web Services, for&#xD;
        example) comes along. Other architectures are generally tied to a particular technology. With MDA, functionality&#xD;
        and behavior are modeled once and only once. Mapping from a Platform-Independent Model (PIM) through a&#xD;
        Platform-Specific Model (PSM) to the supported MDA platforms is being implemented by tools, easing the task of&#xD;
        supporting new or different technologies.” (OMG 2001)&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    UAM takes the same approach—that models are not throw-away, they continue to evolve with the business to support&#xD;
    business goals—the model driven enterprise. Capturing corporate knowledge, preserving it, managing, and building upon&#xD;
    it are major objectives.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    UAM defines three perspectives (layers) with four viewpoints (aspects) in each perspective. The perspectives, and their&#xD;
    associated viewpoints and metamodel, define the language and presentations appropriate for the stakeholders associated&#xD;
    with each perspective and viewpoint. These three perspective languages and associated and integrated viewpoints address&#xD;
    the second last point above—making IT architectures more audience friendly, with a better chance of actually being used&#xD;
    and influencing decisions, as suggested in &lt;em>How to Realise Corporate Value from Enterprise Architecture&lt;/em> (Kluge,&#xD;
    Dietzsch and Rosemann 2006) and &lt;em>Enterprise Architecture at Work: Modeling, Communication, and Analysis&lt;/em>&#xD;
    (Lankhorst, et al. 2005). These perspectives and their associated language are further explored in the description of&#xD;
    UAM in Chapter 3 and are aimed at addressing the many factors hindering the wider uptake of IT architectures by their&#xD;
    intended audience.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
