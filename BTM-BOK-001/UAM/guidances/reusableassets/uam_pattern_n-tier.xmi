<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:GuidanceDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-1ciVfFniEEcQMcmkXUOVWA" name="uam_pattern_n-tier,__PzscIZeEeWxS8WE0a4vpg" guid="-1ciVfFniEEcQMcmkXUOVWA" changeDate="2015-11-09T11:08:02.124-0500" version="7.5.1">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    N-Tier is a&amp;nbsp;multi-tier architecture (often referred to as n-tier architecture) is a client–server architecture in&#xD;
    which presentation, application processing, and data management functions are logically separated (&lt;a&#xD;
    href=&quot;http://en.wikipedia.org/wiki/Multitier_architecture&quot; target=&quot;_blank&quot;>Wikipedia 2013&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Problem Description&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Flexibility for a changing environment is required, which is provided through the separation of applications and data.&#xD;
    The problem is divided into separate components that are then distributed in a systematic and controlled&#xD;
    fashion.&amp;nbsp;The information and accesses need to be controlled, and the maintenance of the information and&#xD;
    applications is a large factor in the operation of the system. Security aspects are also an important part of the&#xD;
    problem.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Applicable Context&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This pattern is best applied where the different tiers, and associated hardware and software, need to be separately&#xD;
    managed and upgraded. Flexibility is important along with scalability and distributed management and development.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pattern Constraints&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This pattern is not applicable if the application or the information cannot be distributed.&amp;nbsp;The scalability of the&#xD;
    applications and information access needs to be examined and managed, since this may be an issue if growth is expected.&#xD;
    Also, since the information and application is centralized on a server, reliability may be impacted unless the solution&#xD;
    is carefully designed and deployed.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Pattern Solution&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The most common application of multi-tier architecture is the three-tier architecture pattern.&amp;nbsp;It is&amp;nbsp;a&#xD;
    client–server architecture pattern in which the user interface (presentation), functional logic (business rules), data&#xD;
    storage and access are separated into three layers as shown in the figure.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are the usual advantages of modular software with well-defined interfaces, but the three-tier architecture also&#xD;
    allows any of the tiers to be upgraded or replaced independently in response to changes in requirements or technology.&#xD;
    For example, a change of operating system in the presentation tier would only affect the desktop application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Typically, the user interface runs on a desktop workstation and uses a standard graphical user interface. The&#xD;
    application logic may consist of one or more separate modules running on&amp;nbsp;the workstation or an application server&#xD;
    in the logic tier, and a database server or mainframe containing the computer data storage logic.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The middle tier in this pattern may be multi-tiered itself, in which case the overall architecture is called an&#xD;
    &quot;&lt;i>n&lt;/i>-tier architecture&quot;.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Client-Server Pattern&quot; src=&quot;./resources/Arch-Pattern-n-tier.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Presentation Tier&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    This is the top level of the application. It displays information related to the application, and provides the required&#xD;
    services to the user. It communicates with other tiers to provide this service.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Logic Tier&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The logical tier controls an application’s functionality by performing detailed processing, supporting the presentation&#xD;
    tier and using the data tier.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Data Tier&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The data tier provides persistence&amp;nbsp;and the data access services.&amp;nbsp; The data access layer provides an&#xD;
    Application Programming Interface (API) to the Logical Tier that exposes methods of managing the stored data without&#xD;
    exposing or creating dependencies on the data storage mechanisms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Avoiding dependencies between tiers trough the definition of APIs is very important.&amp;nbsp;As with any type of&#xD;
    distributed system, there are added costs for implementation and to performance in exchange for improved scalability&#xD;
    and maintainability.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Related Patterns&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Other variations&amp;nbsp;and related patterns to the client-server pattern are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/reusableassets/uam_pattern_distributed_FEAB9C15.html&quot;&#xD;
        guid=&quot;_javDAIZeEeWxS8WE0a4vpg&quot;>Distributed Computing Pattern&lt;/a>&amp;nbsp;&lt;/strong>- a system in which peer components,&#xD;
        located on distributed and networked computers coordinate their activity through the passing of messages.&lt;a&#xD;
        id=&quot;XE_Patterns__Distributed_Computing&quot; name=&quot;XE_Patterns__Distributed_Computing&quot;>&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Distributed Computing&quot; src=&quot;./resources/Arch-Pattern-distributed.png&quot; />&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/reusableassets/uam_pattern_SOA_7571A6D6.html&quot;&#xD;
        guid=&quot;_be1cULFbEeSgVPmVL1L5GQ&quot;>Service-oriented Architecture&lt;/a> &amp;nbsp;&lt;/strong>- an architecture pattern where&#xD;
        discrete applications provide services to other discrete applications, which together provide the required&#xD;
        functionality.&lt;a id=&quot;XE_Patterns__n-Tier&quot; name=&quot;XE_Patterns__n-Tier&quot;>&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Service Oriented Architecture&quot; src=&quot;./resources/Arch-Pattern-SOA.png&quot; />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../UAM/guidances/reusableassets/uam_pattern_p2p_144410EC.html&quot;&#xD;
        guid=&quot;_-7KHkIZdEeWxS8WE0a4vpg&quot;>Peer-to-peer Architectural Pattern&lt;/a>&lt;/strong> - a distributed network architecture&#xD;
        in which individual nodes (peers) in the network are both suppliers and consumers of services and resources.&lt;a&#xD;
        id=&quot;XE_Patterns__Peer-to-Peer&quot; name=&quot;XE_Patterns__Peer-to-Peer&quot;>&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Peer-to-Peer&quot; src=&quot;./resources/Arch-Pattern-p2p.png&quot; />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:GuidanceDescription>
