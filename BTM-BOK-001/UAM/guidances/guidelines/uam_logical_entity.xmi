<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-SmfAQGvJaTHKXvuBGW3aQg" name="uam_logical_entity,_n7HSsOX9EdyjVoHXO3Mbfg" guid="-SmfAQGvJaTHKXvuBGW3aQg" authors="DW Enstrom" changeDate="2014-06-25T14:24:47.527-0400" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Logical entities represent &quot;things&quot; consumed or produced by logical activities.&amp;nbsp;It represents something of value&#xD;
    to the&amp;nbsp;system under study, therefore&amp;nbsp;the entity object is likely persistent. They are also a representation&#xD;
    of&amp;nbsp;real-world objects within the system, &lt;em>customer&lt;/em> for example, and as such they will have relationships&#xD;
    with many other entities within the system. The attributes of the entities reflect their purpose and usage, but should&#xD;
    not have attributes that define how and by whom it should be used. These are business rules and should be&amp;nbsp;defined&#xD;
    external to entities and workflowâ€”they are separate objects themselves.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At the logical level IT concepts such as &lt;em>storage&lt;/em> appear, but since we are at the logical level the specifics&#xD;
    of &lt;em>tables&lt;/em> and &lt;em>primary keys&lt;/em> and other implementation details are not necessarily included in the&#xD;
    model. Candidate keys&amp;nbsp;and other logical level details may be defined.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    What is a Logical Data Model&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Graphical representation of the business requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Contains the things of importance in an organization and how they relate to one another&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Contains business textual definitions and examples&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Validated and approved by a business representative&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Basis of physical database design&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    This is sometimes &lt;em>incorrectly&lt;/em> called a &quot;physical data model&quot;, which is not what the ANSI people had in mind.&#xD;
    The physical design of a database involves deep use of particular database management technology. For example, a&#xD;
    table/column design could be implemented on a collection of computers, located in different parts of the world. That is&#xD;
    the domain of the physical model, or technology model in the enterprise architecture context.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Difference Between Logical &amp;amp; Physical Data Model&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    People often get confused with the fact that logical and physical data model is very different in their objective, goal&#xD;
    and content. Following are some key differences.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;table title=&quot;Logical vs. Physical Models&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;85%&quot; summary=&quot;Logical vs. Physical&quot;&#xD;
border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th>&#xD;
                Logical Data Model&#xD;
            &lt;/th>&#xD;
            &lt;th>&#xD;
                Physical Data Model&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Includes entities, attributes and relationships&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Includes tables, columns, keys, data types, validation rules, database triggers, stored procedures,&#xD;
                domains, and access constraints&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Uses business names for attributes&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Uses abbreviated column names limited by the database management system (DBMS)&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Is independent of technology (platform, DBMS)&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Includes primary keys and indices for fast data access.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Is normalized to 4th normal form&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                May be de-normalized to meet performance requirements&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Does not include any redundant or derived data&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                May include redundant columns or results of complex or difficult to recreate calculation columns&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                Business Subject Matter Experts (SMEs) validate and approve the model&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                Physical modeler lead the modeling activity&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;br />&#xD;
&lt;h4>&#xD;
    Why Build Logical Data Model&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Helps common understanding of business requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Provides foundation for designing a database&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Facilitates data re-use and sharing&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Decreases development and maintenance time and cost&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Confirms a logical process model and helps impact analysis.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Logical Modeling Benefits&#xD;
&lt;/h4>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Clarifies functional specifications and avoids assumption&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Confirms business requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Facilitates business process improvement&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Focus on requirements independent of technology&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Decreases system development time and cost&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Becomes a template for the enterprise&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Facilitates data re-use and sharing&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Faster ROI&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Gathers metadata&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Foster seamless communication between applications&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Focuses communication for data analysis and project team members&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Attributes&quot; name=&quot;Attributes&quot;>Attributes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An &lt;b>attribute&lt;/b> of a class represents a piece of information about an object of that class that is kept with the&#xD;
    object. An attribute has an attribute type. Each attribute and attribute type, respectively, has a name.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An object normally holds different pieces of information that describe some of its characteristics. Such pieces of&#xD;
    information can either be described implicitly in the textual description of the object's class or modeled explicitly&#xD;
    as an attribute of the class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An attribute is of a certain type. An attribute has a name, preferably a noun that describes the attribute's role in&#xD;
    relation to the class. An attribute type can be more or less primitive, for example a simple number or string.&#xD;
    Different classes can have attributes with identical structures. Those attributes should share a description; that is,&#xD;
    they should share an attribute type.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;font size=&quot;+0&quot;>&lt;b>&lt;a id=&quot;Using Attributes or Entities&quot; name=&quot;Using Attributes or Entities&quot;>Attributes&amp;nbsp;vs.&#xD;
    Entities&lt;/a>&lt;/b>&lt;/font>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A key consideration in modeling the entities is always the question: entity or attribute? In other words, is the&#xD;
    &quot;thing&quot; in question important and involved enough to be modeled as an entity, or should it simply be an attribute of&#xD;
    another entity? As always when doing architectures the short answer is &quot;it depends&quot;. It depends, in this case, upon how&#xD;
    the &quot;thing&quot; is used within the enterprise. Is it simply a bit of information or are there other attributes about the&#xD;
    thing that need to be understood and used?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the phenomenon you wish to model is not used by any other class, you can model it as an attribute of an entity&#xD;
    class, or even as a relationship between entity classes. On the other hand, if the phenomenon is used by any other&#xD;
    class in the design model, or if there are attributes about the phenomenon required, then you must model it as a class.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Characteristics of Good Business Entities&quot; name=&quot;Characteristics of Good Business Entities&quot;>Characteristics of a&#xD;
    Good Logical Entity&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Its name and description are clear and understandable.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Logical entity relationships do not depend on each other.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each relationship is used in the workflow of at least one activity.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All &quot;things&quot; in the business, such as products, documents, contracts, and so on, are modeled as entities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It participates in at least one &lt;em>activity&lt;/em>.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Business Events&quot; name=&quot;Business Events&quot;>System Events&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Events can be used to notify interested parties (including other entities or activities) of a change in state of the&#xD;
    entity. The creation and destruction of an entity may be significant. If you have defined a state machine for an&#xD;
    entity, examine the defined states. Each transition is a potential (business) event. Also inspect the attributes and&#xD;
    operations of the entity. Significant operations that are used infrequently may have an event associated with them.&#xD;
    Changes to important attributes may trigger an event. Process patterns and entity patterns may also provide insight&#xD;
    into useful events. For example, if a business entity must be approved before being used further, a&#xD;
    &lt;i>&amp;lt;something&amp;gt; Approved&lt;/i> business event may be useful to notify other parties. For more information on finding&#xD;
    events, see &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../UAM/guidances/guidelines/uam_business_event_82E69349.html&quot;&#xD;
    guid=&quot;_sWMqgE13EeOcVJX_gvTjyg&quot;>Guideline: Business Event&lt;/a>.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
